// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"match-me/ent/user"
	"match-me/ent/userphoto"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// UserPhoto is the model entity for the UserPhoto schema.
type UserPhoto struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// PhotoURL holds the value of the "photo_url" field.
	PhotoURL string `json:"photo_url,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserPhotoQuery when eager-loading is set.
	Edges        UserPhotoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserPhotoEdges holds the relations/edges for other nodes in the graph.
type UserPhotoEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPhotoEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPhoto) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userphoto.FieldOrder:
			values[i] = new(sql.NullInt64)
		case userphoto.FieldPhotoURL:
			values[i] = new(sql.NullString)
		case userphoto.FieldID, userphoto.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPhoto fields.
func (_m *UserPhoto) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userphoto.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case userphoto.FieldPhotoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo_url", values[i])
			} else if value.Valid {
				_m.PhotoURL = value.String
			}
		case userphoto.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				_m.Order = int(value.Int64)
			}
		case userphoto.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				_m.UserID = *value
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserPhoto.
// This includes values selected through modifiers, order, etc.
func (_m *UserPhoto) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserPhoto entity.
func (_m *UserPhoto) QueryUser() *UserQuery {
	return NewUserPhotoClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this UserPhoto.
// Note that you need to call UserPhoto.Unwrap() before calling this method if this UserPhoto
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *UserPhoto) Update() *UserPhotoUpdateOne {
	return NewUserPhotoClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the UserPhoto entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *UserPhoto) Unwrap() *UserPhoto {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserPhoto is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *UserPhoto) String() string {
	var builder strings.Builder
	builder.WriteString("UserPhoto(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("photo_url=")
	builder.WriteString(_m.PhotoURL)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", _m.Order))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// UserPhotos is a parsable slice of UserPhoto.
type UserPhotos []*UserPhoto
