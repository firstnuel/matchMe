// Code generated by ent, DO NOT EDIT.

package ent

import (
	"match-me/ent/connection"
	"match-me/ent/connectionrequest"
	"match-me/ent/message"
	"match-me/ent/schema"
	"match-me/ent/user"
	"match-me/ent/userphoto"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	connectionFields := schema.Connection{}.Fields()
	_ = connectionFields
	// connectionDescConnectedAt is the schema descriptor for connected_at field.
	connectionDescConnectedAt := connectionFields[4].Descriptor()
	// connection.DefaultConnectedAt holds the default value on creation for the connected_at field.
	connection.DefaultConnectedAt = connectionDescConnectedAt.Default.(func() time.Time)
	// connectionDescUpdatedAt is the schema descriptor for updated_at field.
	connectionDescUpdatedAt := connectionFields[5].Descriptor()
	// connection.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	connection.DefaultUpdatedAt = connectionDescUpdatedAt.Default.(func() time.Time)
	// connection.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	connection.UpdateDefaultUpdatedAt = connectionDescUpdatedAt.UpdateDefault.(func() time.Time)
	// connectionDescID is the schema descriptor for id field.
	connectionDescID := connectionFields[0].Descriptor()
	// connection.DefaultID holds the default value on creation for the id field.
	connection.DefaultID = connectionDescID.Default.(func() uuid.UUID)
	connectionrequestFields := schema.ConnectionRequest{}.Fields()
	_ = connectionrequestFields
	// connectionrequestDescMessage is the schema descriptor for message field.
	connectionrequestDescMessage := connectionrequestFields[4].Descriptor()
	// connectionrequest.MessageValidator is a validator for the "message" field. It is called by the builders before save.
	connectionrequest.MessageValidator = connectionrequestDescMessage.Validators[0].(func(string) error)
	// connectionrequestDescCreatedAt is the schema descriptor for created_at field.
	connectionrequestDescCreatedAt := connectionrequestFields[5].Descriptor()
	// connectionrequest.DefaultCreatedAt holds the default value on creation for the created_at field.
	connectionrequest.DefaultCreatedAt = connectionrequestDescCreatedAt.Default.(func() time.Time)
	// connectionrequestDescUpdatedAt is the schema descriptor for updated_at field.
	connectionrequestDescUpdatedAt := connectionrequestFields[6].Descriptor()
	// connectionrequest.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	connectionrequest.DefaultUpdatedAt = connectionrequestDescUpdatedAt.Default.(func() time.Time)
	// connectionrequest.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	connectionrequest.UpdateDefaultUpdatedAt = connectionrequestDescUpdatedAt.UpdateDefault.(func() time.Time)
	// connectionrequestDescID is the schema descriptor for id field.
	connectionrequestDescID := connectionrequestFields[0].Descriptor()
	// connectionrequest.DefaultID holds the default value on creation for the id field.
	connectionrequest.DefaultID = connectionrequestDescID.Default.(func() uuid.UUID)
	messageFields := schema.Message{}.Fields()
	_ = messageFields
	// messageDescIsRead is the schema descriptor for is_read field.
	messageDescIsRead := messageFields[9].Descriptor()
	// message.DefaultIsRead holds the default value on creation for the is_read field.
	message.DefaultIsRead = messageDescIsRead.Default.(bool)
	// messageDescCreatedAt is the schema descriptor for created_at field.
	messageDescCreatedAt := messageFields[10].Descriptor()
	// message.DefaultCreatedAt holds the default value on creation for the created_at field.
	message.DefaultCreatedAt = messageDescCreatedAt.Default.(func() time.Time)
	// messageDescUpdatedAt is the schema descriptor for updated_at field.
	messageDescUpdatedAt := messageFields[11].Descriptor()
	// message.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	message.DefaultUpdatedAt = messageDescUpdatedAt.Default.(func() time.Time)
	// message.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	message.UpdateDefaultUpdatedAt = messageDescUpdatedAt.UpdateDefault.(func() time.Time)
	// messageDescIsDeleted is the schema descriptor for is_deleted field.
	messageDescIsDeleted := messageFields[13].Descriptor()
	// message.DefaultIsDeleted holds the default value on creation for the is_deleted field.
	message.DefaultIsDeleted = messageDescIsDeleted.Default.(bool)
	// messageDescID is the schema descriptor for id field.
	messageDescID := messageFields[0].Descriptor()
	// message.DefaultID holds the default value on creation for the id field.
	message.DefaultID = messageDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPasswordHash is the schema descriptor for password_hash field.
	userDescPasswordHash := userFields[2].Descriptor()
	// user.PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	user.PasswordHashValidator = func() func(string) error {
		validators := userDescPasswordHash.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password_hash string) error {
			for _, fn := range fns {
				if err := fn(password_hash); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescFirstName is the schema descriptor for first_name field.
	userDescFirstName := userFields[3].Descriptor()
	// user.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	user.FirstNameValidator = func() func(string) error {
		validators := userDescFirstName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(first_name string) error {
			for _, fn := range fns {
				if err := fn(first_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescLastName is the schema descriptor for last_name field.
	userDescLastName := userFields[4].Descriptor()
	// user.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	user.LastNameValidator = func() func(string) error {
		validators := userDescLastName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(last_name string) error {
			for _, fn := range fns {
				if err := fn(last_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[6].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[7].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescAge is the schema descriptor for age field.
	userDescAge := userFields[8].Descriptor()
	// user.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	user.AgeValidator = func() func(int) error {
		validators := userDescAge.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(age int) error {
			for _, fn := range fns {
				if err := fn(age); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPreferredAgeMin is the schema descriptor for preferred_age_min field.
	userDescPreferredAgeMin := userFields[9].Descriptor()
	// user.PreferredAgeMinValidator is a validator for the "preferred_age_min" field. It is called by the builders before save.
	user.PreferredAgeMinValidator = func() func(int) error {
		validators := userDescPreferredAgeMin.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(preferred_age_min int) error {
			for _, fn := range fns {
				if err := fn(preferred_age_min); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPreferredAgeMax is the schema descriptor for preferred_age_max field.
	userDescPreferredAgeMax := userFields[10].Descriptor()
	// user.PreferredAgeMaxValidator is a validator for the "preferred_age_max" field. It is called by the builders before save.
	user.PreferredAgeMaxValidator = func() func(int) error {
		validators := userDescPreferredAgeMax.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(preferred_age_max int) error {
			for _, fn := range fns {
				if err := fn(preferred_age_max); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescProfileCompletion is the schema descriptor for profile_completion field.
	userDescProfileCompletion := userFields[11].Descriptor()
	// user.ProfileCompletionValidator is a validator for the "profile_completion" field. It is called by the builders before save.
	user.ProfileCompletionValidator = func() func(int) error {
		validators := userDescProfileCompletion.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(profile_completion int) error {
			for _, fn := range fns {
				if err := fn(profile_completion); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPreferredDistance is the schema descriptor for preferred_distance field.
	userDescPreferredDistance := userFields[15].Descriptor()
	// user.PreferredDistanceValidator is a validator for the "preferred_distance" field. It is called by the builders before save.
	user.PreferredDistanceValidator = func() func(int) error {
		validators := userDescPreferredDistance.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(preferred_distance int) error {
			for _, fn := range fns {
				if err := fn(preferred_distance); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
	userphotoFields := schema.UserPhoto{}.Fields()
	_ = userphotoFields
	// userphotoDescPhotoURL is the schema descriptor for photo_url field.
	userphotoDescPhotoURL := userphotoFields[1].Descriptor()
	// userphoto.PhotoURLValidator is a validator for the "photo_url" field. It is called by the builders before save.
	userphoto.PhotoURLValidator = userphotoDescPhotoURL.Validators[0].(func(string) error)
	// userphotoDescOrder is the schema descriptor for order field.
	userphotoDescOrder := userphotoFields[3].Descriptor()
	// userphoto.OrderValidator is a validator for the "order" field. It is called by the builders before save.
	userphoto.OrderValidator = userphotoDescOrder.Validators[0].(func(int) error)
	// userphotoDescID is the schema descriptor for id field.
	userphotoDescID := userphotoFields[0].Descriptor()
	// userphoto.DefaultID holds the default value on creation for the id field.
	userphoto.DefaultID = userphotoDescID.Default.(func() uuid.UUID)
}
