// Code generated by ent, DO NOT EDIT.

package connection

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the connection type in the database.
	Label = "connection"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldUserAID holds the string denoting the user_a_id field in the database.
	FieldUserAID = "user_a_id"
	// FieldUserBID holds the string denoting the user_b_id field in the database.
	FieldUserBID = "user_b_id"
	// FieldConnectedAt holds the string denoting the connected_at field in the database.
	FieldConnectedAt = "connected_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDroppedAt holds the string denoting the dropped_at field in the database.
	FieldDroppedAt = "dropped_at"
	// EdgeUserA holds the string denoting the user_a edge name in mutations.
	EdgeUserA = "user_a"
	// EdgeUserB holds the string denoting the user_b edge name in mutations.
	EdgeUserB = "user_b"
	// Table holds the table name of the connection in the database.
	Table = "connections"
	// UserATable is the table that holds the user_a relation/edge.
	UserATable = "connections"
	// UserAInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserAInverseTable = "users"
	// UserAColumn is the table column denoting the user_a relation/edge.
	UserAColumn = "user_a_id"
	// UserBTable is the table that holds the user_b relation/edge.
	UserBTable = "connections"
	// UserBInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserBInverseTable = "users"
	// UserBColumn is the table column denoting the user_b relation/edge.
	UserBColumn = "user_b_id"
)

// Columns holds all SQL columns for connection fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldUserAID,
	FieldUserBID,
	FieldConnectedAt,
	FieldUpdatedAt,
	FieldDroppedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultConnectedAt holds the default value on creation for the "connected_at" field.
	DefaultConnectedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusConnected Status = "connected"
	StatusDropped   Status = "dropped"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusConnected, StatusDropped:
		return nil
	default:
		return fmt.Errorf("connection: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Connection queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByUserAID orders the results by the user_a_id field.
func ByUserAID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAID, opts...).ToFunc()
}

// ByUserBID orders the results by the user_b_id field.
func ByUserBID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserBID, opts...).ToFunc()
}

// ByConnectedAt orders the results by the connected_at field.
func ByConnectedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConnectedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDroppedAt orders the results by the dropped_at field.
func ByDroppedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDroppedAt, opts...).ToFunc()
}

// ByUserAField orders the results by user_a field.
func ByUserAField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserAStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserBField orders the results by user_b field.
func ByUserBField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserBStep(), sql.OrderByField(field, opts...))
	}
}
func newUserAStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserAInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserATable, UserAColumn),
	)
}
func newUserBStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserBInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserBTable, UserBColumn),
	)
}
