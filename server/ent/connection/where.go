// Code generated by ent, DO NOT EDIT.

package connection

import (
	"match-me/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldLTE(FieldID, id))
}

// UserAID applies equality check predicate on the "user_a_id" field. It's identical to UserAIDEQ.
func UserAID(v uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldUserAID, v))
}

// UserBID applies equality check predicate on the "user_b_id" field. It's identical to UserBIDEQ.
func UserBID(v uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldUserBID, v))
}

// ConnectedAt applies equality check predicate on the "connected_at" field. It's identical to ConnectedAtEQ.
func ConnectedAt(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldConnectedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldUpdatedAt, v))
}

// DroppedAt applies equality check predicate on the "dropped_at" field. It's identical to DroppedAtEQ.
func DroppedAt(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldDroppedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Connection {
	return predicate.Connection(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Connection {
	return predicate.Connection(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Connection {
	return predicate.Connection(sql.FieldNotIn(FieldStatus, vs...))
}

// UserAIDEQ applies the EQ predicate on the "user_a_id" field.
func UserAIDEQ(v uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldUserAID, v))
}

// UserAIDNEQ applies the NEQ predicate on the "user_a_id" field.
func UserAIDNEQ(v uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldNEQ(FieldUserAID, v))
}

// UserAIDIn applies the In predicate on the "user_a_id" field.
func UserAIDIn(vs ...uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldIn(FieldUserAID, vs...))
}

// UserAIDNotIn applies the NotIn predicate on the "user_a_id" field.
func UserAIDNotIn(vs ...uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldNotIn(FieldUserAID, vs...))
}

// UserBIDEQ applies the EQ predicate on the "user_b_id" field.
func UserBIDEQ(v uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldUserBID, v))
}

// UserBIDNEQ applies the NEQ predicate on the "user_b_id" field.
func UserBIDNEQ(v uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldNEQ(FieldUserBID, v))
}

// UserBIDIn applies the In predicate on the "user_b_id" field.
func UserBIDIn(vs ...uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldIn(FieldUserBID, vs...))
}

// UserBIDNotIn applies the NotIn predicate on the "user_b_id" field.
func UserBIDNotIn(vs ...uuid.UUID) predicate.Connection {
	return predicate.Connection(sql.FieldNotIn(FieldUserBID, vs...))
}

// ConnectedAtEQ applies the EQ predicate on the "connected_at" field.
func ConnectedAtEQ(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldConnectedAt, v))
}

// ConnectedAtNEQ applies the NEQ predicate on the "connected_at" field.
func ConnectedAtNEQ(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldNEQ(FieldConnectedAt, v))
}

// ConnectedAtIn applies the In predicate on the "connected_at" field.
func ConnectedAtIn(vs ...time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldIn(FieldConnectedAt, vs...))
}

// ConnectedAtNotIn applies the NotIn predicate on the "connected_at" field.
func ConnectedAtNotIn(vs ...time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldNotIn(FieldConnectedAt, vs...))
}

// ConnectedAtGT applies the GT predicate on the "connected_at" field.
func ConnectedAtGT(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldGT(FieldConnectedAt, v))
}

// ConnectedAtGTE applies the GTE predicate on the "connected_at" field.
func ConnectedAtGTE(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldGTE(FieldConnectedAt, v))
}

// ConnectedAtLT applies the LT predicate on the "connected_at" field.
func ConnectedAtLT(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldLT(FieldConnectedAt, v))
}

// ConnectedAtLTE applies the LTE predicate on the "connected_at" field.
func ConnectedAtLTE(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldLTE(FieldConnectedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldLTE(FieldUpdatedAt, v))
}

// DroppedAtEQ applies the EQ predicate on the "dropped_at" field.
func DroppedAtEQ(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldDroppedAt, v))
}

// DroppedAtNEQ applies the NEQ predicate on the "dropped_at" field.
func DroppedAtNEQ(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldNEQ(FieldDroppedAt, v))
}

// DroppedAtIn applies the In predicate on the "dropped_at" field.
func DroppedAtIn(vs ...time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldIn(FieldDroppedAt, vs...))
}

// DroppedAtNotIn applies the NotIn predicate on the "dropped_at" field.
func DroppedAtNotIn(vs ...time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldNotIn(FieldDroppedAt, vs...))
}

// DroppedAtGT applies the GT predicate on the "dropped_at" field.
func DroppedAtGT(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldGT(FieldDroppedAt, v))
}

// DroppedAtGTE applies the GTE predicate on the "dropped_at" field.
func DroppedAtGTE(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldGTE(FieldDroppedAt, v))
}

// DroppedAtLT applies the LT predicate on the "dropped_at" field.
func DroppedAtLT(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldLT(FieldDroppedAt, v))
}

// DroppedAtLTE applies the LTE predicate on the "dropped_at" field.
func DroppedAtLTE(v time.Time) predicate.Connection {
	return predicate.Connection(sql.FieldLTE(FieldDroppedAt, v))
}

// DroppedAtIsNil applies the IsNil predicate on the "dropped_at" field.
func DroppedAtIsNil() predicate.Connection {
	return predicate.Connection(sql.FieldIsNull(FieldDroppedAt))
}

// DroppedAtNotNil applies the NotNil predicate on the "dropped_at" field.
func DroppedAtNotNil() predicate.Connection {
	return predicate.Connection(sql.FieldNotNull(FieldDroppedAt))
}

// HasUserA applies the HasEdge predicate on the "user_a" edge.
func HasUserA() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserATable, UserAColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserAWith applies the HasEdge predicate on the "user_a" edge with a given conditions (other predicates).
func HasUserAWith(preds ...predicate.User) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newUserAStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserB applies the HasEdge predicate on the "user_b" edge.
func HasUserB() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserBTable, UserBColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserBWith applies the HasEdge predicate on the "user_b" edge with a given conditions (other predicates).
func HasUserBWith(preds ...predicate.User) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newUserBStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Connection) predicate.Connection {
	return predicate.Connection(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Connection) predicate.Connection {
	return predicate.Connection(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Connection) predicate.Connection {
	return predicate.Connection(sql.NotPredicates(p))
}
