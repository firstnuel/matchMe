// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"match-me/ent/migrate"

	"match-me/ent/connection"
	"match-me/ent/connectionrequest"
	"match-me/ent/message"
	"match-me/ent/user"
	"match-me/ent/userphoto"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Connection is the client for interacting with the Connection builders.
	Connection *ConnectionClient
	// ConnectionRequest is the client for interacting with the ConnectionRequest builders.
	ConnectionRequest *ConnectionRequestClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserPhoto is the client for interacting with the UserPhoto builders.
	UserPhoto *UserPhotoClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Connection = NewConnectionClient(c.config)
	c.ConnectionRequest = NewConnectionRequestClient(c.config)
	c.Message = NewMessageClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserPhoto = NewUserPhotoClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Connection:        NewConnectionClient(cfg),
		ConnectionRequest: NewConnectionRequestClient(cfg),
		Message:           NewMessageClient(cfg),
		User:              NewUserClient(cfg),
		UserPhoto:         NewUserPhotoClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Connection:        NewConnectionClient(cfg),
		ConnectionRequest: NewConnectionRequestClient(cfg),
		Message:           NewMessageClient(cfg),
		User:              NewUserClient(cfg),
		UserPhoto:         NewUserPhotoClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Connection.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Connection.Use(hooks...)
	c.ConnectionRequest.Use(hooks...)
	c.Message.Use(hooks...)
	c.User.Use(hooks...)
	c.UserPhoto.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Connection.Intercept(interceptors...)
	c.ConnectionRequest.Intercept(interceptors...)
	c.Message.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
	c.UserPhoto.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ConnectionMutation:
		return c.Connection.mutate(ctx, m)
	case *ConnectionRequestMutation:
		return c.ConnectionRequest.mutate(ctx, m)
	case *MessageMutation:
		return c.Message.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserPhotoMutation:
		return c.UserPhoto.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ConnectionClient is a client for the Connection schema.
type ConnectionClient struct {
	config
}

// NewConnectionClient returns a client for the Connection from the given config.
func NewConnectionClient(c config) *ConnectionClient {
	return &ConnectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `connection.Hooks(f(g(h())))`.
func (c *ConnectionClient) Use(hooks ...Hook) {
	c.hooks.Connection = append(c.hooks.Connection, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `connection.Intercept(f(g(h())))`.
func (c *ConnectionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Connection = append(c.inters.Connection, interceptors...)
}

// Create returns a builder for creating a Connection entity.
func (c *ConnectionClient) Create() *ConnectionCreate {
	mutation := newConnectionMutation(c.config, OpCreate)
	return &ConnectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Connection entities.
func (c *ConnectionClient) CreateBulk(builders ...*ConnectionCreate) *ConnectionCreateBulk {
	return &ConnectionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConnectionClient) MapCreateBulk(slice any, setFunc func(*ConnectionCreate, int)) *ConnectionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConnectionCreateBulk{err: fmt.Errorf("calling to ConnectionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConnectionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConnectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Connection.
func (c *ConnectionClient) Update() *ConnectionUpdate {
	mutation := newConnectionMutation(c.config, OpUpdate)
	return &ConnectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConnectionClient) UpdateOne(_m *Connection) *ConnectionUpdateOne {
	mutation := newConnectionMutation(c.config, OpUpdateOne, withConnection(_m))
	return &ConnectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConnectionClient) UpdateOneID(id uuid.UUID) *ConnectionUpdateOne {
	mutation := newConnectionMutation(c.config, OpUpdateOne, withConnectionID(id))
	return &ConnectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Connection.
func (c *ConnectionClient) Delete() *ConnectionDelete {
	mutation := newConnectionMutation(c.config, OpDelete)
	return &ConnectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConnectionClient) DeleteOne(_m *Connection) *ConnectionDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConnectionClient) DeleteOneID(id uuid.UUID) *ConnectionDeleteOne {
	builder := c.Delete().Where(connection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConnectionDeleteOne{builder}
}

// Query returns a query builder for Connection.
func (c *ConnectionClient) Query() *ConnectionQuery {
	return &ConnectionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConnection},
		inters: c.Interceptors(),
	}
}

// Get returns a Connection entity by its id.
func (c *ConnectionClient) Get(ctx context.Context, id uuid.UUID) (*Connection, error) {
	return c.Query().Where(connection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConnectionClient) GetX(ctx context.Context, id uuid.UUID) *Connection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserA queries the user_a edge of a Connection.
func (c *ConnectionClient) QueryUserA(_m *Connection) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.UserATable, connection.UserAColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserB queries the user_b edge of a Connection.
func (c *ConnectionClient) QueryUserB(_m *Connection) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.UserBTable, connection.UserBColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConnectionClient) Hooks() []Hook {
	return c.hooks.Connection
}

// Interceptors returns the client interceptors.
func (c *ConnectionClient) Interceptors() []Interceptor {
	return c.inters.Connection
}

func (c *ConnectionClient) mutate(ctx context.Context, m *ConnectionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConnectionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConnectionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConnectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConnectionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Connection mutation op: %q", m.Op())
	}
}

// ConnectionRequestClient is a client for the ConnectionRequest schema.
type ConnectionRequestClient struct {
	config
}

// NewConnectionRequestClient returns a client for the ConnectionRequest from the given config.
func NewConnectionRequestClient(c config) *ConnectionRequestClient {
	return &ConnectionRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `connectionrequest.Hooks(f(g(h())))`.
func (c *ConnectionRequestClient) Use(hooks ...Hook) {
	c.hooks.ConnectionRequest = append(c.hooks.ConnectionRequest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `connectionrequest.Intercept(f(g(h())))`.
func (c *ConnectionRequestClient) Intercept(interceptors ...Interceptor) {
	c.inters.ConnectionRequest = append(c.inters.ConnectionRequest, interceptors...)
}

// Create returns a builder for creating a ConnectionRequest entity.
func (c *ConnectionRequestClient) Create() *ConnectionRequestCreate {
	mutation := newConnectionRequestMutation(c.config, OpCreate)
	return &ConnectionRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ConnectionRequest entities.
func (c *ConnectionRequestClient) CreateBulk(builders ...*ConnectionRequestCreate) *ConnectionRequestCreateBulk {
	return &ConnectionRequestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConnectionRequestClient) MapCreateBulk(slice any, setFunc func(*ConnectionRequestCreate, int)) *ConnectionRequestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConnectionRequestCreateBulk{err: fmt.Errorf("calling to ConnectionRequestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConnectionRequestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConnectionRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ConnectionRequest.
func (c *ConnectionRequestClient) Update() *ConnectionRequestUpdate {
	mutation := newConnectionRequestMutation(c.config, OpUpdate)
	return &ConnectionRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConnectionRequestClient) UpdateOne(_m *ConnectionRequest) *ConnectionRequestUpdateOne {
	mutation := newConnectionRequestMutation(c.config, OpUpdateOne, withConnectionRequest(_m))
	return &ConnectionRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConnectionRequestClient) UpdateOneID(id uuid.UUID) *ConnectionRequestUpdateOne {
	mutation := newConnectionRequestMutation(c.config, OpUpdateOne, withConnectionRequestID(id))
	return &ConnectionRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ConnectionRequest.
func (c *ConnectionRequestClient) Delete() *ConnectionRequestDelete {
	mutation := newConnectionRequestMutation(c.config, OpDelete)
	return &ConnectionRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConnectionRequestClient) DeleteOne(_m *ConnectionRequest) *ConnectionRequestDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConnectionRequestClient) DeleteOneID(id uuid.UUID) *ConnectionRequestDeleteOne {
	builder := c.Delete().Where(connectionrequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConnectionRequestDeleteOne{builder}
}

// Query returns a query builder for ConnectionRequest.
func (c *ConnectionRequestClient) Query() *ConnectionRequestQuery {
	return &ConnectionRequestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConnectionRequest},
		inters: c.Interceptors(),
	}
}

// Get returns a ConnectionRequest entity by its id.
func (c *ConnectionRequestClient) Get(ctx context.Context, id uuid.UUID) (*ConnectionRequest, error) {
	return c.Query().Where(connectionrequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConnectionRequestClient) GetX(ctx context.Context, id uuid.UUID) *ConnectionRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySender queries the sender edge of a ConnectionRequest.
func (c *ConnectionRequestClient) QuerySender(_m *ConnectionRequest) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connectionrequest.Table, connectionrequest.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connectionrequest.SenderTable, connectionrequest.SenderColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReceiver queries the receiver edge of a ConnectionRequest.
func (c *ConnectionRequestClient) QueryReceiver(_m *ConnectionRequest) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connectionrequest.Table, connectionrequest.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connectionrequest.ReceiverTable, connectionrequest.ReceiverColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConnectionRequestClient) Hooks() []Hook {
	return c.hooks.ConnectionRequest
}

// Interceptors returns the client interceptors.
func (c *ConnectionRequestClient) Interceptors() []Interceptor {
	return c.inters.ConnectionRequest
}

func (c *ConnectionRequestClient) mutate(ctx context.Context, m *ConnectionRequestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConnectionRequestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConnectionRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConnectionRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConnectionRequestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ConnectionRequest mutation op: %q", m.Op())
	}
}

// MessageClient is a client for the Message schema.
type MessageClient struct {
	config
}

// NewMessageClient returns a client for the Message from the given config.
func NewMessageClient(c config) *MessageClient {
	return &MessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `message.Hooks(f(g(h())))`.
func (c *MessageClient) Use(hooks ...Hook) {
	c.hooks.Message = append(c.hooks.Message, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `message.Intercept(f(g(h())))`.
func (c *MessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Message = append(c.inters.Message, interceptors...)
}

// Create returns a builder for creating a Message entity.
func (c *MessageClient) Create() *MessageCreate {
	mutation := newMessageMutation(c.config, OpCreate)
	return &MessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Message entities.
func (c *MessageClient) CreateBulk(builders ...*MessageCreate) *MessageCreateBulk {
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MessageClient) MapCreateBulk(slice any, setFunc func(*MessageCreate, int)) *MessageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MessageCreateBulk{err: fmt.Errorf("calling to MessageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MessageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Message.
func (c *MessageClient) Update() *MessageUpdate {
	mutation := newMessageMutation(c.config, OpUpdate)
	return &MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageClient) UpdateOne(_m *Message) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessage(_m))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageClient) UpdateOneID(id uuid.UUID) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessageID(id))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Message.
func (c *MessageClient) Delete() *MessageDelete {
	mutation := newMessageMutation(c.config, OpDelete)
	return &MessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageClient) DeleteOne(_m *Message) *MessageDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MessageClient) DeleteOneID(id uuid.UUID) *MessageDeleteOne {
	builder := c.Delete().Where(message.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageDeleteOne{builder}
}

// Query returns a query builder for Message.
func (c *MessageClient) Query() *MessageQuery {
	return &MessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a Message entity by its id.
func (c *MessageClient) Get(ctx context.Context, id uuid.UUID) (*Message, error) {
	return c.Query().Where(message.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageClient) GetX(ctx context.Context, id uuid.UUID) *Message {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConnection queries the connection edge of a Message.
func (c *MessageClient) QueryConnection(_m *Message) *ConnectionQuery {
	query := (&ConnectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, message.ConnectionTable, message.ConnectionColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySender queries the sender edge of a Message.
func (c *MessageClient) QuerySender(_m *Message) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, message.SenderTable, message.SenderColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReceiver queries the receiver edge of a Message.
func (c *MessageClient) QueryReceiver(_m *Message) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, message.ReceiverTable, message.ReceiverColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MessageClient) Hooks() []Hook {
	return c.hooks.Message
}

// Interceptors returns the client interceptors.
func (c *MessageClient) Interceptors() []Interceptor {
	return c.inters.Message
}

func (c *MessageClient) mutate(ctx context.Context, m *MessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Message mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(_m *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(_m))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(_m *User) *UserDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPhotos queries the photos edge of a User.
func (c *UserClient) QueryPhotos(_m *User) *UserPhotoQuery {
	query := (&UserPhotoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userphoto.Table, userphoto.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PhotosTable, user.PhotosColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserPhotoClient is a client for the UserPhoto schema.
type UserPhotoClient struct {
	config
}

// NewUserPhotoClient returns a client for the UserPhoto from the given config.
func NewUserPhotoClient(c config) *UserPhotoClient {
	return &UserPhotoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userphoto.Hooks(f(g(h())))`.
func (c *UserPhotoClient) Use(hooks ...Hook) {
	c.hooks.UserPhoto = append(c.hooks.UserPhoto, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userphoto.Intercept(f(g(h())))`.
func (c *UserPhotoClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserPhoto = append(c.inters.UserPhoto, interceptors...)
}

// Create returns a builder for creating a UserPhoto entity.
func (c *UserPhotoClient) Create() *UserPhotoCreate {
	mutation := newUserPhotoMutation(c.config, OpCreate)
	return &UserPhotoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserPhoto entities.
func (c *UserPhotoClient) CreateBulk(builders ...*UserPhotoCreate) *UserPhotoCreateBulk {
	return &UserPhotoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserPhotoClient) MapCreateBulk(slice any, setFunc func(*UserPhotoCreate, int)) *UserPhotoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserPhotoCreateBulk{err: fmt.Errorf("calling to UserPhotoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserPhotoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserPhotoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserPhoto.
func (c *UserPhotoClient) Update() *UserPhotoUpdate {
	mutation := newUserPhotoMutation(c.config, OpUpdate)
	return &UserPhotoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserPhotoClient) UpdateOne(_m *UserPhoto) *UserPhotoUpdateOne {
	mutation := newUserPhotoMutation(c.config, OpUpdateOne, withUserPhoto(_m))
	return &UserPhotoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserPhotoClient) UpdateOneID(id uuid.UUID) *UserPhotoUpdateOne {
	mutation := newUserPhotoMutation(c.config, OpUpdateOne, withUserPhotoID(id))
	return &UserPhotoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserPhoto.
func (c *UserPhotoClient) Delete() *UserPhotoDelete {
	mutation := newUserPhotoMutation(c.config, OpDelete)
	return &UserPhotoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserPhotoClient) DeleteOne(_m *UserPhoto) *UserPhotoDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserPhotoClient) DeleteOneID(id uuid.UUID) *UserPhotoDeleteOne {
	builder := c.Delete().Where(userphoto.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserPhotoDeleteOne{builder}
}

// Query returns a query builder for UserPhoto.
func (c *UserPhotoClient) Query() *UserPhotoQuery {
	return &UserPhotoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserPhoto},
		inters: c.Interceptors(),
	}
}

// Get returns a UserPhoto entity by its id.
func (c *UserPhotoClient) Get(ctx context.Context, id uuid.UUID) (*UserPhoto, error) {
	return c.Query().Where(userphoto.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserPhotoClient) GetX(ctx context.Context, id uuid.UUID) *UserPhoto {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserPhoto.
func (c *UserPhotoClient) QueryUser(_m *UserPhoto) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userphoto.Table, userphoto.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userphoto.UserTable, userphoto.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserPhotoClient) Hooks() []Hook {
	return c.hooks.UserPhoto
}

// Interceptors returns the client interceptors.
func (c *UserPhotoClient) Interceptors() []Interceptor {
	return c.inters.UserPhoto
}

func (c *UserPhotoClient) mutate(ctx context.Context, m *UserPhotoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserPhotoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserPhotoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserPhotoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserPhotoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserPhoto mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Connection, ConnectionRequest, Message, User, UserPhoto []ent.Hook
	}
	inters struct {
		Connection, ConnectionRequest, Message, User, UserPhoto []ent.Interceptor
	}
)
