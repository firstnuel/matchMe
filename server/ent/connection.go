// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"match-me/ent/connection"
	"match-me/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Connection is the model entity for the Connection schema.
type Connection struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Status of the connection between two users
	Status connection.Status `json:"status,omitempty"`
	// ID of the first user in the connection
	UserAID uuid.UUID `json:"user_a_id,omitempty"`
	// ID of the second user in the connection
	UserBID uuid.UUID `json:"user_b_id,omitempty"`
	// Timestamp when the connection was established
	ConnectedAt time.Time `json:"connected_at,omitempty"`
	// Timestamp when the connection was last updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Timestamp when the connection was dropped (if applicable)
	DroppedAt time.Time `json:"dropped_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConnectionQuery when eager-loading is set.
	Edges        ConnectionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ConnectionEdges holds the relations/edges for other nodes in the graph.
type ConnectionEdges struct {
	// Reference to the first user in the connection
	UserA *User `json:"user_a,omitempty"`
	// Reference to the second user in the connection
	UserB *User `json:"user_b,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserAOrErr returns the UserA value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConnectionEdges) UserAOrErr() (*User, error) {
	if e.UserA != nil {
		return e.UserA, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user_a"}
}

// UserBOrErr returns the UserB value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConnectionEdges) UserBOrErr() (*User, error) {
	if e.UserB != nil {
		return e.UserB, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user_b"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Connection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case connection.FieldStatus:
			values[i] = new(sql.NullString)
		case connection.FieldConnectedAt, connection.FieldUpdatedAt, connection.FieldDroppedAt:
			values[i] = new(sql.NullTime)
		case connection.FieldID, connection.FieldUserAID, connection.FieldUserBID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Connection fields.
func (_m *Connection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case connection.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case connection.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = connection.Status(value.String)
			}
		case connection.FieldUserAID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_a_id", values[i])
			} else if value != nil {
				_m.UserAID = *value
			}
		case connection.FieldUserBID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_b_id", values[i])
			} else if value != nil {
				_m.UserBID = *value
			}
		case connection.FieldConnectedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field connected_at", values[i])
			} else if value.Valid {
				_m.ConnectedAt = value.Time
			}
		case connection.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case connection.FieldDroppedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dropped_at", values[i])
			} else if value.Valid {
				_m.DroppedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Connection.
// This includes values selected through modifiers, order, etc.
func (_m *Connection) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUserA queries the "user_a" edge of the Connection entity.
func (_m *Connection) QueryUserA() *UserQuery {
	return NewConnectionClient(_m.config).QueryUserA(_m)
}

// QueryUserB queries the "user_b" edge of the Connection entity.
func (_m *Connection) QueryUserB() *UserQuery {
	return NewConnectionClient(_m.config).QueryUserB(_m)
}

// Update returns a builder for updating this Connection.
// Note that you need to call Connection.Unwrap() before calling this method if this Connection
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Connection) Update() *ConnectionUpdateOne {
	return NewConnectionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Connection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Connection) Unwrap() *Connection {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Connection is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Connection) String() string {
	var builder strings.Builder
	builder.WriteString("Connection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("user_a_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserAID))
	builder.WriteString(", ")
	builder.WriteString("user_b_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserBID))
	builder.WriteString(", ")
	builder.WriteString("connected_at=")
	builder.WriteString(_m.ConnectedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("dropped_at=")
	builder.WriteString(_m.DroppedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Connections is a parsable slice of Connection.
type Connections []*Connection
