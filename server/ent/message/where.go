// Code generated by ent, DO NOT EDIT.

package message

import (
	"match-me/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// ConnectionID applies equality check predicate on the "connection_id" field. It's identical to ConnectionIDEQ.
func ConnectionID(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldConnectionID, v))
}

// SenderID applies equality check predicate on the "sender_id" field. It's identical to SenderIDEQ.
func SenderID(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSenderID, v))
}

// ReceiverID applies equality check predicate on the "receiver_id" field. It's identical to ReceiverIDEQ.
func ReceiverID(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldReceiverID, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldContent, v))
}

// MediaURL applies equality check predicate on the "media_url" field. It's identical to MediaURLEQ.
func MediaURL(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMediaURL, v))
}

// MediaType applies equality check predicate on the "media_type" field. It's identical to MediaTypeEQ.
func MediaType(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMediaType, v))
}

// MediaPublicID applies equality check predicate on the "media_public_id" field. It's identical to MediaPublicIDEQ.
func MediaPublicID(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMediaPublicID, v))
}

// IsRead applies equality check predicate on the "is_read" field. It's identical to IsReadEQ.
func IsRead(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldIsRead, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUpdatedAt, v))
}

// ReadAt applies equality check predicate on the "read_at" field. It's identical to ReadAtEQ.
func ReadAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldReadAt, v))
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldIsDeleted, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDeletedAt, v))
}

// ConnectionIDEQ applies the EQ predicate on the "connection_id" field.
func ConnectionIDEQ(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldConnectionID, v))
}

// ConnectionIDNEQ applies the NEQ predicate on the "connection_id" field.
func ConnectionIDNEQ(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldConnectionID, v))
}

// ConnectionIDIn applies the In predicate on the "connection_id" field.
func ConnectionIDIn(vs ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldConnectionID, vs...))
}

// ConnectionIDNotIn applies the NotIn predicate on the "connection_id" field.
func ConnectionIDNotIn(vs ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldConnectionID, vs...))
}

// SenderIDEQ applies the EQ predicate on the "sender_id" field.
func SenderIDEQ(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSenderID, v))
}

// SenderIDNEQ applies the NEQ predicate on the "sender_id" field.
func SenderIDNEQ(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldSenderID, v))
}

// SenderIDIn applies the In predicate on the "sender_id" field.
func SenderIDIn(vs ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldSenderID, vs...))
}

// SenderIDNotIn applies the NotIn predicate on the "sender_id" field.
func SenderIDNotIn(vs ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldSenderID, vs...))
}

// ReceiverIDEQ applies the EQ predicate on the "receiver_id" field.
func ReceiverIDEQ(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldReceiverID, v))
}

// ReceiverIDNEQ applies the NEQ predicate on the "receiver_id" field.
func ReceiverIDNEQ(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldReceiverID, v))
}

// ReceiverIDIn applies the In predicate on the "receiver_id" field.
func ReceiverIDIn(vs ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldReceiverID, vs...))
}

// ReceiverIDNotIn applies the NotIn predicate on the "receiver_id" field.
func ReceiverIDNotIn(vs ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldReceiverID, vs...))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldType, vs...))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldContent, v))
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldContent))
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldContent))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldContent, v))
}

// MediaURLEQ applies the EQ predicate on the "media_url" field.
func MediaURLEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMediaURL, v))
}

// MediaURLNEQ applies the NEQ predicate on the "media_url" field.
func MediaURLNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldMediaURL, v))
}

// MediaURLIn applies the In predicate on the "media_url" field.
func MediaURLIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldMediaURL, vs...))
}

// MediaURLNotIn applies the NotIn predicate on the "media_url" field.
func MediaURLNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldMediaURL, vs...))
}

// MediaURLGT applies the GT predicate on the "media_url" field.
func MediaURLGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldMediaURL, v))
}

// MediaURLGTE applies the GTE predicate on the "media_url" field.
func MediaURLGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldMediaURL, v))
}

// MediaURLLT applies the LT predicate on the "media_url" field.
func MediaURLLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldMediaURL, v))
}

// MediaURLLTE applies the LTE predicate on the "media_url" field.
func MediaURLLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldMediaURL, v))
}

// MediaURLContains applies the Contains predicate on the "media_url" field.
func MediaURLContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldMediaURL, v))
}

// MediaURLHasPrefix applies the HasPrefix predicate on the "media_url" field.
func MediaURLHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldMediaURL, v))
}

// MediaURLHasSuffix applies the HasSuffix predicate on the "media_url" field.
func MediaURLHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldMediaURL, v))
}

// MediaURLIsNil applies the IsNil predicate on the "media_url" field.
func MediaURLIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldMediaURL))
}

// MediaURLNotNil applies the NotNil predicate on the "media_url" field.
func MediaURLNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldMediaURL))
}

// MediaURLEqualFold applies the EqualFold predicate on the "media_url" field.
func MediaURLEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldMediaURL, v))
}

// MediaURLContainsFold applies the ContainsFold predicate on the "media_url" field.
func MediaURLContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldMediaURL, v))
}

// MediaTypeEQ applies the EQ predicate on the "media_type" field.
func MediaTypeEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMediaType, v))
}

// MediaTypeNEQ applies the NEQ predicate on the "media_type" field.
func MediaTypeNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldMediaType, v))
}

// MediaTypeIn applies the In predicate on the "media_type" field.
func MediaTypeIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldMediaType, vs...))
}

// MediaTypeNotIn applies the NotIn predicate on the "media_type" field.
func MediaTypeNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldMediaType, vs...))
}

// MediaTypeGT applies the GT predicate on the "media_type" field.
func MediaTypeGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldMediaType, v))
}

// MediaTypeGTE applies the GTE predicate on the "media_type" field.
func MediaTypeGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldMediaType, v))
}

// MediaTypeLT applies the LT predicate on the "media_type" field.
func MediaTypeLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldMediaType, v))
}

// MediaTypeLTE applies the LTE predicate on the "media_type" field.
func MediaTypeLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldMediaType, v))
}

// MediaTypeContains applies the Contains predicate on the "media_type" field.
func MediaTypeContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldMediaType, v))
}

// MediaTypeHasPrefix applies the HasPrefix predicate on the "media_type" field.
func MediaTypeHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldMediaType, v))
}

// MediaTypeHasSuffix applies the HasSuffix predicate on the "media_type" field.
func MediaTypeHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldMediaType, v))
}

// MediaTypeIsNil applies the IsNil predicate on the "media_type" field.
func MediaTypeIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldMediaType))
}

// MediaTypeNotNil applies the NotNil predicate on the "media_type" field.
func MediaTypeNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldMediaType))
}

// MediaTypeEqualFold applies the EqualFold predicate on the "media_type" field.
func MediaTypeEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldMediaType, v))
}

// MediaTypeContainsFold applies the ContainsFold predicate on the "media_type" field.
func MediaTypeContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldMediaType, v))
}

// MediaPublicIDEQ applies the EQ predicate on the "media_public_id" field.
func MediaPublicIDEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMediaPublicID, v))
}

// MediaPublicIDNEQ applies the NEQ predicate on the "media_public_id" field.
func MediaPublicIDNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldMediaPublicID, v))
}

// MediaPublicIDIn applies the In predicate on the "media_public_id" field.
func MediaPublicIDIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldMediaPublicID, vs...))
}

// MediaPublicIDNotIn applies the NotIn predicate on the "media_public_id" field.
func MediaPublicIDNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldMediaPublicID, vs...))
}

// MediaPublicIDGT applies the GT predicate on the "media_public_id" field.
func MediaPublicIDGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldMediaPublicID, v))
}

// MediaPublicIDGTE applies the GTE predicate on the "media_public_id" field.
func MediaPublicIDGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldMediaPublicID, v))
}

// MediaPublicIDLT applies the LT predicate on the "media_public_id" field.
func MediaPublicIDLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldMediaPublicID, v))
}

// MediaPublicIDLTE applies the LTE predicate on the "media_public_id" field.
func MediaPublicIDLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldMediaPublicID, v))
}

// MediaPublicIDContains applies the Contains predicate on the "media_public_id" field.
func MediaPublicIDContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldMediaPublicID, v))
}

// MediaPublicIDHasPrefix applies the HasPrefix predicate on the "media_public_id" field.
func MediaPublicIDHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldMediaPublicID, v))
}

// MediaPublicIDHasSuffix applies the HasSuffix predicate on the "media_public_id" field.
func MediaPublicIDHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldMediaPublicID, v))
}

// MediaPublicIDIsNil applies the IsNil predicate on the "media_public_id" field.
func MediaPublicIDIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldMediaPublicID))
}

// MediaPublicIDNotNil applies the NotNil predicate on the "media_public_id" field.
func MediaPublicIDNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldMediaPublicID))
}

// MediaPublicIDEqualFold applies the EqualFold predicate on the "media_public_id" field.
func MediaPublicIDEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldMediaPublicID, v))
}

// MediaPublicIDContainsFold applies the ContainsFold predicate on the "media_public_id" field.
func MediaPublicIDContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldMediaPublicID, v))
}

// IsReadEQ applies the EQ predicate on the "is_read" field.
func IsReadEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldIsRead, v))
}

// IsReadNEQ applies the NEQ predicate on the "is_read" field.
func IsReadNEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldIsRead, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldUpdatedAt, v))
}

// ReadAtEQ applies the EQ predicate on the "read_at" field.
func ReadAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldReadAt, v))
}

// ReadAtNEQ applies the NEQ predicate on the "read_at" field.
func ReadAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldReadAt, v))
}

// ReadAtIn applies the In predicate on the "read_at" field.
func ReadAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldReadAt, vs...))
}

// ReadAtNotIn applies the NotIn predicate on the "read_at" field.
func ReadAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldReadAt, vs...))
}

// ReadAtGT applies the GT predicate on the "read_at" field.
func ReadAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldReadAt, v))
}

// ReadAtGTE applies the GTE predicate on the "read_at" field.
func ReadAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldReadAt, v))
}

// ReadAtLT applies the LT predicate on the "read_at" field.
func ReadAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldReadAt, v))
}

// ReadAtLTE applies the LTE predicate on the "read_at" field.
func ReadAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldReadAt, v))
}

// ReadAtIsNil applies the IsNil predicate on the "read_at" field.
func ReadAtIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldReadAt))
}

// ReadAtNotNil applies the NotNil predicate on the "read_at" field.
func ReadAtNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldReadAt))
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldIsDeleted, v))
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldIsDeleted, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldDeletedAt))
}

// HasConnection applies the HasEdge predicate on the "connection" edge.
func HasConnection() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ConnectionTable, ConnectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectionWith applies the HasEdge predicate on the "connection" edge with a given conditions (other predicates).
func HasConnectionWith(preds ...predicate.Connection) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newConnectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSender applies the HasEdge predicate on the "sender" edge.
func HasSender() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SenderTable, SenderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSenderWith applies the HasEdge predicate on the "sender" edge with a given conditions (other predicates).
func HasSenderWith(preds ...predicate.User) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newSenderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReceiver applies the HasEdge predicate on the "receiver" edge.
func HasReceiver() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ReceiverTable, ReceiverColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceiverWith applies the HasEdge predicate on the "receiver" edge with a given conditions (other predicates).
func HasReceiverWith(preds ...predicate.User) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newReceiverStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(sql.NotPredicates(p))
}
