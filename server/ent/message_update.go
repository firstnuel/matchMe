// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"match-me/ent/connection"
	"match-me/ent/message"
	"match-me/ent/predicate"
	"match-me/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks    []Hook
	mutation *MessageMutation
}

// Where appends a list predicates to the MessageUpdate builder.
func (_u *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetConnectionID sets the "connection_id" field.
func (_u *MessageUpdate) SetConnectionID(v uuid.UUID) *MessageUpdate {
	_u.mutation.SetConnectionID(v)
	return _u
}

// SetNillableConnectionID sets the "connection_id" field if the given value is not nil.
func (_u *MessageUpdate) SetNillableConnectionID(v *uuid.UUID) *MessageUpdate {
	if v != nil {
		_u.SetConnectionID(*v)
	}
	return _u
}

// SetSenderID sets the "sender_id" field.
func (_u *MessageUpdate) SetSenderID(v uuid.UUID) *MessageUpdate {
	_u.mutation.SetSenderID(v)
	return _u
}

// SetNillableSenderID sets the "sender_id" field if the given value is not nil.
func (_u *MessageUpdate) SetNillableSenderID(v *uuid.UUID) *MessageUpdate {
	if v != nil {
		_u.SetSenderID(*v)
	}
	return _u
}

// SetReceiverID sets the "receiver_id" field.
func (_u *MessageUpdate) SetReceiverID(v uuid.UUID) *MessageUpdate {
	_u.mutation.SetReceiverID(v)
	return _u
}

// SetNillableReceiverID sets the "receiver_id" field if the given value is not nil.
func (_u *MessageUpdate) SetNillableReceiverID(v *uuid.UUID) *MessageUpdate {
	if v != nil {
		_u.SetReceiverID(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *MessageUpdate) SetType(v message.Type) *MessageUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *MessageUpdate) SetNillableType(v *message.Type) *MessageUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetContent sets the "content" field.
func (_u *MessageUpdate) SetContent(v string) *MessageUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *MessageUpdate) SetNillableContent(v *string) *MessageUpdate {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// ClearContent clears the value of the "content" field.
func (_u *MessageUpdate) ClearContent() *MessageUpdate {
	_u.mutation.ClearContent()
	return _u
}

// SetMediaURL sets the "media_url" field.
func (_u *MessageUpdate) SetMediaURL(v string) *MessageUpdate {
	_u.mutation.SetMediaURL(v)
	return _u
}

// SetNillableMediaURL sets the "media_url" field if the given value is not nil.
func (_u *MessageUpdate) SetNillableMediaURL(v *string) *MessageUpdate {
	if v != nil {
		_u.SetMediaURL(*v)
	}
	return _u
}

// ClearMediaURL clears the value of the "media_url" field.
func (_u *MessageUpdate) ClearMediaURL() *MessageUpdate {
	_u.mutation.ClearMediaURL()
	return _u
}

// SetMediaType sets the "media_type" field.
func (_u *MessageUpdate) SetMediaType(v string) *MessageUpdate {
	_u.mutation.SetMediaType(v)
	return _u
}

// SetNillableMediaType sets the "media_type" field if the given value is not nil.
func (_u *MessageUpdate) SetNillableMediaType(v *string) *MessageUpdate {
	if v != nil {
		_u.SetMediaType(*v)
	}
	return _u
}

// ClearMediaType clears the value of the "media_type" field.
func (_u *MessageUpdate) ClearMediaType() *MessageUpdate {
	_u.mutation.ClearMediaType()
	return _u
}

// SetMediaPublicID sets the "media_public_id" field.
func (_u *MessageUpdate) SetMediaPublicID(v string) *MessageUpdate {
	_u.mutation.SetMediaPublicID(v)
	return _u
}

// SetNillableMediaPublicID sets the "media_public_id" field if the given value is not nil.
func (_u *MessageUpdate) SetNillableMediaPublicID(v *string) *MessageUpdate {
	if v != nil {
		_u.SetMediaPublicID(*v)
	}
	return _u
}

// ClearMediaPublicID clears the value of the "media_public_id" field.
func (_u *MessageUpdate) ClearMediaPublicID() *MessageUpdate {
	_u.mutation.ClearMediaPublicID()
	return _u
}

// SetIsRead sets the "is_read" field.
func (_u *MessageUpdate) SetIsRead(v bool) *MessageUpdate {
	_u.mutation.SetIsRead(v)
	return _u
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (_u *MessageUpdate) SetNillableIsRead(v *bool) *MessageUpdate {
	if v != nil {
		_u.SetIsRead(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MessageUpdate) SetUpdatedAt(v time.Time) *MessageUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetReadAt sets the "read_at" field.
func (_u *MessageUpdate) SetReadAt(v time.Time) *MessageUpdate {
	_u.mutation.SetReadAt(v)
	return _u
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (_u *MessageUpdate) SetNillableReadAt(v *time.Time) *MessageUpdate {
	if v != nil {
		_u.SetReadAt(*v)
	}
	return _u
}

// ClearReadAt clears the value of the "read_at" field.
func (_u *MessageUpdate) ClearReadAt() *MessageUpdate {
	_u.mutation.ClearReadAt()
	return _u
}

// SetIsDeleted sets the "is_deleted" field.
func (_u *MessageUpdate) SetIsDeleted(v bool) *MessageUpdate {
	_u.mutation.SetIsDeleted(v)
	return _u
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (_u *MessageUpdate) SetNillableIsDeleted(v *bool) *MessageUpdate {
	if v != nil {
		_u.SetIsDeleted(*v)
	}
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *MessageUpdate) SetDeletedAt(v time.Time) *MessageUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *MessageUpdate) SetNillableDeletedAt(v *time.Time) *MessageUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *MessageUpdate) ClearDeletedAt() *MessageUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetConnection sets the "connection" edge to the Connection entity.
func (_u *MessageUpdate) SetConnection(v *Connection) *MessageUpdate {
	return _u.SetConnectionID(v.ID)
}

// SetSender sets the "sender" edge to the User entity.
func (_u *MessageUpdate) SetSender(v *User) *MessageUpdate {
	return _u.SetSenderID(v.ID)
}

// SetReceiver sets the "receiver" edge to the User entity.
func (_u *MessageUpdate) SetReceiver(v *User) *MessageUpdate {
	return _u.SetReceiverID(v.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (_u *MessageUpdate) Mutation() *MessageMutation {
	return _u.mutation
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (_u *MessageUpdate) ClearConnection() *MessageUpdate {
	_u.mutation.ClearConnection()
	return _u
}

// ClearSender clears the "sender" edge to the User entity.
func (_u *MessageUpdate) ClearSender() *MessageUpdate {
	_u.mutation.ClearSender()
	return _u
}

// ClearReceiver clears the "receiver" edge to the User entity.
func (_u *MessageUpdate) ClearReceiver() *MessageUpdate {
	_u.mutation.ClearReceiver()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MessageUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MessageUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MessageUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MessageUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := message.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MessageUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := message.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Message.type": %w`, err)}
		}
	}
	if _u.mutation.ConnectionCleared() && len(_u.mutation.ConnectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Message.connection"`)
	}
	if _u.mutation.SenderCleared() && len(_u.mutation.SenderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Message.sender"`)
	}
	if _u.mutation.ReceiverCleared() && len(_u.mutation.ReceiverIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Message.receiver"`)
	}
	return nil
}

func (_u *MessageUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(message.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(message.FieldContent, field.TypeString, value)
	}
	if _u.mutation.ContentCleared() {
		_spec.ClearField(message.FieldContent, field.TypeString)
	}
	if value, ok := _u.mutation.MediaURL(); ok {
		_spec.SetField(message.FieldMediaURL, field.TypeString, value)
	}
	if _u.mutation.MediaURLCleared() {
		_spec.ClearField(message.FieldMediaURL, field.TypeString)
	}
	if value, ok := _u.mutation.MediaType(); ok {
		_spec.SetField(message.FieldMediaType, field.TypeString, value)
	}
	if _u.mutation.MediaTypeCleared() {
		_spec.ClearField(message.FieldMediaType, field.TypeString)
	}
	if value, ok := _u.mutation.MediaPublicID(); ok {
		_spec.SetField(message.FieldMediaPublicID, field.TypeString, value)
	}
	if _u.mutation.MediaPublicIDCleared() {
		_spec.ClearField(message.FieldMediaPublicID, field.TypeString)
	}
	if value, ok := _u.mutation.IsRead(); ok {
		_spec.SetField(message.FieldIsRead, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(message.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ReadAt(); ok {
		_spec.SetField(message.FieldReadAt, field.TypeTime, value)
	}
	if _u.mutation.ReadAtCleared() {
		_spec.ClearField(message.FieldReadAt, field.TypeTime)
	}
	if value, ok := _u.mutation.IsDeleted(); ok {
		_spec.SetField(message.FieldIsDeleted, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(message.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(message.FieldDeletedAt, field.TypeTime)
	}
	if _u.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.ConnectionTable,
			Columns: []string{message.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.ConnectionTable,
			Columns: []string{message.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.SenderTable,
			Columns: []string{message.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.SenderTable,
			Columns: []string{message.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.ReceiverTable,
			Columns: []string{message.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.ReceiverTable,
			Columns: []string{message.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageMutation
}

// SetConnectionID sets the "connection_id" field.
func (_u *MessageUpdateOne) SetConnectionID(v uuid.UUID) *MessageUpdateOne {
	_u.mutation.SetConnectionID(v)
	return _u
}

// SetNillableConnectionID sets the "connection_id" field if the given value is not nil.
func (_u *MessageUpdateOne) SetNillableConnectionID(v *uuid.UUID) *MessageUpdateOne {
	if v != nil {
		_u.SetConnectionID(*v)
	}
	return _u
}

// SetSenderID sets the "sender_id" field.
func (_u *MessageUpdateOne) SetSenderID(v uuid.UUID) *MessageUpdateOne {
	_u.mutation.SetSenderID(v)
	return _u
}

// SetNillableSenderID sets the "sender_id" field if the given value is not nil.
func (_u *MessageUpdateOne) SetNillableSenderID(v *uuid.UUID) *MessageUpdateOne {
	if v != nil {
		_u.SetSenderID(*v)
	}
	return _u
}

// SetReceiverID sets the "receiver_id" field.
func (_u *MessageUpdateOne) SetReceiverID(v uuid.UUID) *MessageUpdateOne {
	_u.mutation.SetReceiverID(v)
	return _u
}

// SetNillableReceiverID sets the "receiver_id" field if the given value is not nil.
func (_u *MessageUpdateOne) SetNillableReceiverID(v *uuid.UUID) *MessageUpdateOne {
	if v != nil {
		_u.SetReceiverID(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *MessageUpdateOne) SetType(v message.Type) *MessageUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *MessageUpdateOne) SetNillableType(v *message.Type) *MessageUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetContent sets the "content" field.
func (_u *MessageUpdateOne) SetContent(v string) *MessageUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *MessageUpdateOne) SetNillableContent(v *string) *MessageUpdateOne {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// ClearContent clears the value of the "content" field.
func (_u *MessageUpdateOne) ClearContent() *MessageUpdateOne {
	_u.mutation.ClearContent()
	return _u
}

// SetMediaURL sets the "media_url" field.
func (_u *MessageUpdateOne) SetMediaURL(v string) *MessageUpdateOne {
	_u.mutation.SetMediaURL(v)
	return _u
}

// SetNillableMediaURL sets the "media_url" field if the given value is not nil.
func (_u *MessageUpdateOne) SetNillableMediaURL(v *string) *MessageUpdateOne {
	if v != nil {
		_u.SetMediaURL(*v)
	}
	return _u
}

// ClearMediaURL clears the value of the "media_url" field.
func (_u *MessageUpdateOne) ClearMediaURL() *MessageUpdateOne {
	_u.mutation.ClearMediaURL()
	return _u
}

// SetMediaType sets the "media_type" field.
func (_u *MessageUpdateOne) SetMediaType(v string) *MessageUpdateOne {
	_u.mutation.SetMediaType(v)
	return _u
}

// SetNillableMediaType sets the "media_type" field if the given value is not nil.
func (_u *MessageUpdateOne) SetNillableMediaType(v *string) *MessageUpdateOne {
	if v != nil {
		_u.SetMediaType(*v)
	}
	return _u
}

// ClearMediaType clears the value of the "media_type" field.
func (_u *MessageUpdateOne) ClearMediaType() *MessageUpdateOne {
	_u.mutation.ClearMediaType()
	return _u
}

// SetMediaPublicID sets the "media_public_id" field.
func (_u *MessageUpdateOne) SetMediaPublicID(v string) *MessageUpdateOne {
	_u.mutation.SetMediaPublicID(v)
	return _u
}

// SetNillableMediaPublicID sets the "media_public_id" field if the given value is not nil.
func (_u *MessageUpdateOne) SetNillableMediaPublicID(v *string) *MessageUpdateOne {
	if v != nil {
		_u.SetMediaPublicID(*v)
	}
	return _u
}

// ClearMediaPublicID clears the value of the "media_public_id" field.
func (_u *MessageUpdateOne) ClearMediaPublicID() *MessageUpdateOne {
	_u.mutation.ClearMediaPublicID()
	return _u
}

// SetIsRead sets the "is_read" field.
func (_u *MessageUpdateOne) SetIsRead(v bool) *MessageUpdateOne {
	_u.mutation.SetIsRead(v)
	return _u
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (_u *MessageUpdateOne) SetNillableIsRead(v *bool) *MessageUpdateOne {
	if v != nil {
		_u.SetIsRead(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MessageUpdateOne) SetUpdatedAt(v time.Time) *MessageUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetReadAt sets the "read_at" field.
func (_u *MessageUpdateOne) SetReadAt(v time.Time) *MessageUpdateOne {
	_u.mutation.SetReadAt(v)
	return _u
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (_u *MessageUpdateOne) SetNillableReadAt(v *time.Time) *MessageUpdateOne {
	if v != nil {
		_u.SetReadAt(*v)
	}
	return _u
}

// ClearReadAt clears the value of the "read_at" field.
func (_u *MessageUpdateOne) ClearReadAt() *MessageUpdateOne {
	_u.mutation.ClearReadAt()
	return _u
}

// SetIsDeleted sets the "is_deleted" field.
func (_u *MessageUpdateOne) SetIsDeleted(v bool) *MessageUpdateOne {
	_u.mutation.SetIsDeleted(v)
	return _u
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (_u *MessageUpdateOne) SetNillableIsDeleted(v *bool) *MessageUpdateOne {
	if v != nil {
		_u.SetIsDeleted(*v)
	}
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *MessageUpdateOne) SetDeletedAt(v time.Time) *MessageUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *MessageUpdateOne) SetNillableDeletedAt(v *time.Time) *MessageUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *MessageUpdateOne) ClearDeletedAt() *MessageUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetConnection sets the "connection" edge to the Connection entity.
func (_u *MessageUpdateOne) SetConnection(v *Connection) *MessageUpdateOne {
	return _u.SetConnectionID(v.ID)
}

// SetSender sets the "sender" edge to the User entity.
func (_u *MessageUpdateOne) SetSender(v *User) *MessageUpdateOne {
	return _u.SetSenderID(v.ID)
}

// SetReceiver sets the "receiver" edge to the User entity.
func (_u *MessageUpdateOne) SetReceiver(v *User) *MessageUpdateOne {
	return _u.SetReceiverID(v.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (_u *MessageUpdateOne) Mutation() *MessageMutation {
	return _u.mutation
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (_u *MessageUpdateOne) ClearConnection() *MessageUpdateOne {
	_u.mutation.ClearConnection()
	return _u
}

// ClearSender clears the "sender" edge to the User entity.
func (_u *MessageUpdateOne) ClearSender() *MessageUpdateOne {
	_u.mutation.ClearSender()
	return _u
}

// ClearReceiver clears the "receiver" edge to the User entity.
func (_u *MessageUpdateOne) ClearReceiver() *MessageUpdateOne {
	_u.mutation.ClearReceiver()
	return _u
}

// Where appends a list predicates to the MessageUpdate builder.
func (_u *MessageUpdateOne) Where(ps ...predicate.Message) *MessageUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MessageUpdateOne) Select(field string, fields ...string) *MessageUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Message entity.
func (_u *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MessageUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := message.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MessageUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := message.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Message.type": %w`, err)}
		}
	}
	if _u.mutation.ConnectionCleared() && len(_u.mutation.ConnectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Message.connection"`)
	}
	if _u.mutation.SenderCleared() && len(_u.mutation.SenderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Message.sender"`)
	}
	if _u.mutation.ReceiverCleared() && len(_u.mutation.ReceiverIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Message.receiver"`)
	}
	return nil
}

func (_u *MessageUpdateOne) sqlSave(ctx context.Context) (_node *Message, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Message.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, message.FieldID)
		for _, f := range fields {
			if !message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(message.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(message.FieldContent, field.TypeString, value)
	}
	if _u.mutation.ContentCleared() {
		_spec.ClearField(message.FieldContent, field.TypeString)
	}
	if value, ok := _u.mutation.MediaURL(); ok {
		_spec.SetField(message.FieldMediaURL, field.TypeString, value)
	}
	if _u.mutation.MediaURLCleared() {
		_spec.ClearField(message.FieldMediaURL, field.TypeString)
	}
	if value, ok := _u.mutation.MediaType(); ok {
		_spec.SetField(message.FieldMediaType, field.TypeString, value)
	}
	if _u.mutation.MediaTypeCleared() {
		_spec.ClearField(message.FieldMediaType, field.TypeString)
	}
	if value, ok := _u.mutation.MediaPublicID(); ok {
		_spec.SetField(message.FieldMediaPublicID, field.TypeString, value)
	}
	if _u.mutation.MediaPublicIDCleared() {
		_spec.ClearField(message.FieldMediaPublicID, field.TypeString)
	}
	if value, ok := _u.mutation.IsRead(); ok {
		_spec.SetField(message.FieldIsRead, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(message.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ReadAt(); ok {
		_spec.SetField(message.FieldReadAt, field.TypeTime, value)
	}
	if _u.mutation.ReadAtCleared() {
		_spec.ClearField(message.FieldReadAt, field.TypeTime)
	}
	if value, ok := _u.mutation.IsDeleted(); ok {
		_spec.SetField(message.FieldIsDeleted, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(message.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(message.FieldDeletedAt, field.TypeTime)
	}
	if _u.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.ConnectionTable,
			Columns: []string{message.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.ConnectionTable,
			Columns: []string{message.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.SenderTable,
			Columns: []string{message.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.SenderTable,
			Columns: []string{message.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.ReceiverTable,
			Columns: []string{message.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.ReceiverTable,
			Columns: []string{message.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Message{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
