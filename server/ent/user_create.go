// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"match-me/ent/schema"
	"match-me/ent/user"
	"match-me/ent/userphoto"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (_c *UserCreate) SetEmail(v string) *UserCreate {
	_c.mutation.SetEmail(v)
	return _c
}

// SetPasswordHash sets the "password_hash" field.
func (_c *UserCreate) SetPasswordHash(v string) *UserCreate {
	_c.mutation.SetPasswordHash(v)
	return _c
}

// SetFirstName sets the "first_name" field.
func (_c *UserCreate) SetFirstName(v string) *UserCreate {
	_c.mutation.SetFirstName(v)
	return _c
}

// SetLastName sets the "last_name" field.
func (_c *UserCreate) SetLastName(v string) *UserCreate {
	_c.mutation.SetLastName(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserCreate) SetCreatedAt(v time.Time) *UserCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableCreatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *UserCreate) SetUpdatedAt(v time.Time) *UserCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableUpdatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetAge sets the "age" field.
func (_c *UserCreate) SetAge(v int) *UserCreate {
	_c.mutation.SetAge(v)
	return _c
}

// SetPreferredAgeMin sets the "preferred_age_min" field.
func (_c *UserCreate) SetPreferredAgeMin(v int) *UserCreate {
	_c.mutation.SetPreferredAgeMin(v)
	return _c
}

// SetNillablePreferredAgeMin sets the "preferred_age_min" field if the given value is not nil.
func (_c *UserCreate) SetNillablePreferredAgeMin(v *int) *UserCreate {
	if v != nil {
		_c.SetPreferredAgeMin(*v)
	}
	return _c
}

// SetPreferredAgeMax sets the "preferred_age_max" field.
func (_c *UserCreate) SetPreferredAgeMax(v int) *UserCreate {
	_c.mutation.SetPreferredAgeMax(v)
	return _c
}

// SetNillablePreferredAgeMax sets the "preferred_age_max" field if the given value is not nil.
func (_c *UserCreate) SetNillablePreferredAgeMax(v *int) *UserCreate {
	if v != nil {
		_c.SetPreferredAgeMax(*v)
	}
	return _c
}

// SetProfileCompletion sets the "profile_completion" field.
func (_c *UserCreate) SetProfileCompletion(v int) *UserCreate {
	_c.mutation.SetProfileCompletion(v)
	return _c
}

// SetNillableProfileCompletion sets the "profile_completion" field if the given value is not nil.
func (_c *UserCreate) SetNillableProfileCompletion(v *int) *UserCreate {
	if v != nil {
		_c.SetProfileCompletion(*v)
	}
	return _c
}

// SetGender sets the "gender" field.
func (_c *UserCreate) SetGender(v user.Gender) *UserCreate {
	_c.mutation.SetGender(v)
	return _c
}

// SetPreferredGender sets the "preferred_gender" field.
func (_c *UserCreate) SetPreferredGender(v user.PreferredGender) *UserCreate {
	_c.mutation.SetPreferredGender(v)
	return _c
}

// SetNillablePreferredGender sets the "preferred_gender" field if the given value is not nil.
func (_c *UserCreate) SetNillablePreferredGender(v *user.PreferredGender) *UserCreate {
	if v != nil {
		_c.SetPreferredGender(*v)
	}
	return _c
}

// SetCoordinates sets the "coordinates" field.
func (_c *UserCreate) SetCoordinates(v *schema.Point) *UserCreate {
	_c.mutation.SetCoordinates(v)
	return _c
}

// SetLookingFor sets the "looking_for" field.
func (_c *UserCreate) SetLookingFor(v []string) *UserCreate {
	_c.mutation.SetLookingFor(v)
	return _c
}

// SetInterests sets the "interests" field.
func (_c *UserCreate) SetInterests(v []string) *UserCreate {
	_c.mutation.SetInterests(v)
	return _c
}

// SetMusicPreferences sets the "music_preferences" field.
func (_c *UserCreate) SetMusicPreferences(v []string) *UserCreate {
	_c.mutation.SetMusicPreferences(v)
	return _c
}

// SetFoodPreferences sets the "food_preferences" field.
func (_c *UserCreate) SetFoodPreferences(v []string) *UserCreate {
	_c.mutation.SetFoodPreferences(v)
	return _c
}

// SetCommunicationStyle sets the "communication_style" field.
func (_c *UserCreate) SetCommunicationStyle(v string) *UserCreate {
	_c.mutation.SetCommunicationStyle(v)
	return _c
}

// SetNillableCommunicationStyle sets the "communication_style" field if the given value is not nil.
func (_c *UserCreate) SetNillableCommunicationStyle(v *string) *UserCreate {
	if v != nil {
		_c.SetCommunicationStyle(*v)
	}
	return _c
}

// SetPrompts sets the "prompts" field.
func (_c *UserCreate) SetPrompts(v []schema.Prompt) *UserCreate {
	_c.mutation.SetPrompts(v)
	return _c
}

// SetID sets the "id" field.
func (_c *UserCreate) SetID(v uuid.UUID) *UserCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *UserCreate) SetNillableID(v *uuid.UUID) *UserCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddPhotoIDs adds the "photos" edge to the UserPhoto entity by IDs.
func (_c *UserCreate) AddPhotoIDs(ids ...uuid.UUID) *UserCreate {
	_c.mutation.AddPhotoIDs(ids...)
	return _c
}

// AddPhotos adds the "photos" edges to the UserPhoto entity.
func (_c *UserCreate) AddPhotos(v ...*UserPhoto) *UserCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPhotoIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_c *UserCreate) Mutation() *UserMutation {
	return _c.mutation
}

// Save creates the User in the database.
func (_c *UserCreate) Save(ctx context.Context) (*User, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserCreate) SaveX(ctx context.Context) *User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.PreferredGender(); !ok {
		v := user.DefaultPreferredGender
		_c.mutation.SetPreferredGender(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := user.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserCreate) check() error {
	if _, ok := _c.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if v, ok := _c.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if _, ok := _c.mutation.PasswordHash(); !ok {
		return &ValidationError{Name: "password_hash", err: errors.New(`ent: missing required field "User.password_hash"`)}
	}
	if v, ok := _c.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "User.password_hash": %w`, err)}
		}
	}
	if _, ok := _c.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "User.first_name"`)}
	}
	if v, ok := _c.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "User.last_name"`)}
	}
	if v, ok := _c.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	if _, ok := _c.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "User.age"`)}
	}
	if v, ok := _c.mutation.Age(); ok {
		if err := user.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "User.age": %w`, err)}
		}
	}
	if v, ok := _c.mutation.PreferredAgeMin(); ok {
		if err := user.PreferredAgeMinValidator(v); err != nil {
			return &ValidationError{Name: "preferred_age_min", err: fmt.Errorf(`ent: validator failed for field "User.preferred_age_min": %w`, err)}
		}
	}
	if v, ok := _c.mutation.PreferredAgeMax(); ok {
		if err := user.PreferredAgeMaxValidator(v); err != nil {
			return &ValidationError{Name: "preferred_age_max", err: fmt.Errorf(`ent: validator failed for field "User.preferred_age_max": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ProfileCompletion(); ok {
		if err := user.ProfileCompletionValidator(v); err != nil {
			return &ValidationError{Name: "profile_completion", err: fmt.Errorf(`ent: validator failed for field "User.profile_completion": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "User.gender"`)}
	}
	if v, ok := _c.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "User.gender": %w`, err)}
		}
	}
	if _, ok := _c.mutation.PreferredGender(); !ok {
		return &ValidationError{Name: "preferred_gender", err: errors.New(`ent: missing required field "User.preferred_gender"`)}
	}
	if v, ok := _c.mutation.PreferredGender(); ok {
		if err := user.PreferredGenderValidator(v); err != nil {
			return &ValidationError{Name: "preferred_gender", err: fmt.Errorf(`ent: validator failed for field "User.preferred_gender": %w`, err)}
		}
	}
	return nil
}

func (_c *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := _c.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
		_node.PasswordHash = value
	}
	if value, ok := _c.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := _c.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeInt, value)
		_node.Age = value
	}
	if value, ok := _c.mutation.PreferredAgeMin(); ok {
		_spec.SetField(user.FieldPreferredAgeMin, field.TypeInt, value)
		_node.PreferredAgeMin = value
	}
	if value, ok := _c.mutation.PreferredAgeMax(); ok {
		_spec.SetField(user.FieldPreferredAgeMax, field.TypeInt, value)
		_node.PreferredAgeMax = value
	}
	if value, ok := _c.mutation.ProfileCompletion(); ok {
		_spec.SetField(user.FieldProfileCompletion, field.TypeInt, value)
		_node.ProfileCompletion = value
	}
	if value, ok := _c.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if value, ok := _c.mutation.PreferredGender(); ok {
		_spec.SetField(user.FieldPreferredGender, field.TypeEnum, value)
		_node.PreferredGender = value
	}
	if value, ok := _c.mutation.Coordinates(); ok {
		_spec.SetField(user.FieldCoordinates, field.TypeOther, value)
		_node.Coordinates = value
	}
	if value, ok := _c.mutation.LookingFor(); ok {
		_spec.SetField(user.FieldLookingFor, field.TypeJSON, value)
		_node.LookingFor = value
	}
	if value, ok := _c.mutation.Interests(); ok {
		_spec.SetField(user.FieldInterests, field.TypeJSON, value)
		_node.Interests = value
	}
	if value, ok := _c.mutation.MusicPreferences(); ok {
		_spec.SetField(user.FieldMusicPreferences, field.TypeJSON, value)
		_node.MusicPreferences = value
	}
	if value, ok := _c.mutation.FoodPreferences(); ok {
		_spec.SetField(user.FieldFoodPreferences, field.TypeJSON, value)
		_node.FoodPreferences = value
	}
	if value, ok := _c.mutation.CommunicationStyle(); ok {
		_spec.SetField(user.FieldCommunicationStyle, field.TypeString, value)
		_node.CommunicationStyle = value
	}
	if value, ok := _c.mutation.Prompts(); ok {
		_spec.SetField(user.FieldPrompts, field.TypeJSON, value)
		_node.Prompts = value
	}
	if nodes := _c.mutation.PhotosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PhotosTable,
			Columns: []string{user.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userphoto.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (_c *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*User, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
