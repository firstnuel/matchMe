// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"match-me/ent/connectionrequest"
	"match-me/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ConnectionRequest is the model entity for the ConnectionRequest schema.
type ConnectionRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ID of the user sending the connection request
	SenderID uuid.UUID `json:"sender_id,omitempty"`
	// ID of the user receiving the connection request
	ReceiverID uuid.UUID `json:"receiver_id,omitempty"`
	// Status of the connection request
	Status connectionrequest.Status `json:"status,omitempty"`
	// Optional message from sender to receiver
	Message string `json:"message,omitempty"`
	// Timestamp when the request was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Timestamp when the request was last updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Timestamp when the request was responded to (accepted/declined)
	RespondedAt time.Time `json:"responded_at,omitempty"`
	// Timestamp when the request expires (if applicable)
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConnectionRequestQuery when eager-loading is set.
	Edges        ConnectionRequestEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ConnectionRequestEdges holds the relations/edges for other nodes in the graph.
type ConnectionRequestEdges struct {
	// Reference to the user who sent the request
	Sender *User `json:"sender,omitempty"`
	// Reference to the user who received the request
	Receiver *User `json:"receiver,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SenderOrErr returns the Sender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConnectionRequestEdges) SenderOrErr() (*User, error) {
	if e.Sender != nil {
		return e.Sender, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "sender"}
}

// ReceiverOrErr returns the Receiver value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConnectionRequestEdges) ReceiverOrErr() (*User, error) {
	if e.Receiver != nil {
		return e.Receiver, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "receiver"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ConnectionRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case connectionrequest.FieldStatus, connectionrequest.FieldMessage:
			values[i] = new(sql.NullString)
		case connectionrequest.FieldCreatedAt, connectionrequest.FieldUpdatedAt, connectionrequest.FieldRespondedAt, connectionrequest.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case connectionrequest.FieldID, connectionrequest.FieldSenderID, connectionrequest.FieldReceiverID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ConnectionRequest fields.
func (_m *ConnectionRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case connectionrequest.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case connectionrequest.FieldSenderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field sender_id", values[i])
			} else if value != nil {
				_m.SenderID = *value
			}
		case connectionrequest.FieldReceiverID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_id", values[i])
			} else if value != nil {
				_m.ReceiverID = *value
			}
		case connectionrequest.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = connectionrequest.Status(value.String)
			}
		case connectionrequest.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				_m.Message = value.String
			}
		case connectionrequest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case connectionrequest.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case connectionrequest.FieldRespondedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field responded_at", values[i])
			} else if value.Valid {
				_m.RespondedAt = value.Time
			}
		case connectionrequest.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				_m.ExpiresAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ConnectionRequest.
// This includes values selected through modifiers, order, etc.
func (_m *ConnectionRequest) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QuerySender queries the "sender" edge of the ConnectionRequest entity.
func (_m *ConnectionRequest) QuerySender() *UserQuery {
	return NewConnectionRequestClient(_m.config).QuerySender(_m)
}

// QueryReceiver queries the "receiver" edge of the ConnectionRequest entity.
func (_m *ConnectionRequest) QueryReceiver() *UserQuery {
	return NewConnectionRequestClient(_m.config).QueryReceiver(_m)
}

// Update returns a builder for updating this ConnectionRequest.
// Note that you need to call ConnectionRequest.Unwrap() before calling this method if this ConnectionRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ConnectionRequest) Update() *ConnectionRequestUpdateOne {
	return NewConnectionRequestClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ConnectionRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ConnectionRequest) Unwrap() *ConnectionRequest {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ConnectionRequest is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ConnectionRequest) String() string {
	var builder strings.Builder
	builder.WriteString("ConnectionRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("sender_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.SenderID))
	builder.WriteString(", ")
	builder.WriteString("receiver_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ReceiverID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(_m.Message)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("responded_at=")
	builder.WriteString(_m.RespondedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(_m.ExpiresAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ConnectionRequests is a parsable slice of ConnectionRequest.
type ConnectionRequests []*ConnectionRequest
