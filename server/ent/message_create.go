// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"match-me/ent/connection"
	"match-me/ent/message"
	"match-me/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MessageCreate is the builder for creating a Message entity.
type MessageCreate struct {
	config
	mutation *MessageMutation
	hooks    []Hook
}

// SetConnectionID sets the "connection_id" field.
func (_c *MessageCreate) SetConnectionID(v uuid.UUID) *MessageCreate {
	_c.mutation.SetConnectionID(v)
	return _c
}

// SetSenderID sets the "sender_id" field.
func (_c *MessageCreate) SetSenderID(v uuid.UUID) *MessageCreate {
	_c.mutation.SetSenderID(v)
	return _c
}

// SetReceiverID sets the "receiver_id" field.
func (_c *MessageCreate) SetReceiverID(v uuid.UUID) *MessageCreate {
	_c.mutation.SetReceiverID(v)
	return _c
}

// SetType sets the "type" field.
func (_c *MessageCreate) SetType(v message.Type) *MessageCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *MessageCreate) SetNillableType(v *message.Type) *MessageCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetContent sets the "content" field.
func (_c *MessageCreate) SetContent(v string) *MessageCreate {
	_c.mutation.SetContent(v)
	return _c
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_c *MessageCreate) SetNillableContent(v *string) *MessageCreate {
	if v != nil {
		_c.SetContent(*v)
	}
	return _c
}

// SetMediaURL sets the "media_url" field.
func (_c *MessageCreate) SetMediaURL(v string) *MessageCreate {
	_c.mutation.SetMediaURL(v)
	return _c
}

// SetNillableMediaURL sets the "media_url" field if the given value is not nil.
func (_c *MessageCreate) SetNillableMediaURL(v *string) *MessageCreate {
	if v != nil {
		_c.SetMediaURL(*v)
	}
	return _c
}

// SetMediaType sets the "media_type" field.
func (_c *MessageCreate) SetMediaType(v string) *MessageCreate {
	_c.mutation.SetMediaType(v)
	return _c
}

// SetNillableMediaType sets the "media_type" field if the given value is not nil.
func (_c *MessageCreate) SetNillableMediaType(v *string) *MessageCreate {
	if v != nil {
		_c.SetMediaType(*v)
	}
	return _c
}

// SetMediaPublicID sets the "media_public_id" field.
func (_c *MessageCreate) SetMediaPublicID(v string) *MessageCreate {
	_c.mutation.SetMediaPublicID(v)
	return _c
}

// SetNillableMediaPublicID sets the "media_public_id" field if the given value is not nil.
func (_c *MessageCreate) SetNillableMediaPublicID(v *string) *MessageCreate {
	if v != nil {
		_c.SetMediaPublicID(*v)
	}
	return _c
}

// SetIsRead sets the "is_read" field.
func (_c *MessageCreate) SetIsRead(v bool) *MessageCreate {
	_c.mutation.SetIsRead(v)
	return _c
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (_c *MessageCreate) SetNillableIsRead(v *bool) *MessageCreate {
	if v != nil {
		_c.SetIsRead(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *MessageCreate) SetCreatedAt(v time.Time) *MessageCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *MessageCreate) SetNillableCreatedAt(v *time.Time) *MessageCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *MessageCreate) SetUpdatedAt(v time.Time) *MessageCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *MessageCreate) SetNillableUpdatedAt(v *time.Time) *MessageCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetReadAt sets the "read_at" field.
func (_c *MessageCreate) SetReadAt(v time.Time) *MessageCreate {
	_c.mutation.SetReadAt(v)
	return _c
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (_c *MessageCreate) SetNillableReadAt(v *time.Time) *MessageCreate {
	if v != nil {
		_c.SetReadAt(*v)
	}
	return _c
}

// SetIsDeleted sets the "is_deleted" field.
func (_c *MessageCreate) SetIsDeleted(v bool) *MessageCreate {
	_c.mutation.SetIsDeleted(v)
	return _c
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (_c *MessageCreate) SetNillableIsDeleted(v *bool) *MessageCreate {
	if v != nil {
		_c.SetIsDeleted(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *MessageCreate) SetDeletedAt(v time.Time) *MessageCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *MessageCreate) SetNillableDeletedAt(v *time.Time) *MessageCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *MessageCreate) SetID(v uuid.UUID) *MessageCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *MessageCreate) SetNillableID(v *uuid.UUID) *MessageCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetConnection sets the "connection" edge to the Connection entity.
func (_c *MessageCreate) SetConnection(v *Connection) *MessageCreate {
	return _c.SetConnectionID(v.ID)
}

// SetSender sets the "sender" edge to the User entity.
func (_c *MessageCreate) SetSender(v *User) *MessageCreate {
	return _c.SetSenderID(v.ID)
}

// SetReceiver sets the "receiver" edge to the User entity.
func (_c *MessageCreate) SetReceiver(v *User) *MessageCreate {
	return _c.SetReceiverID(v.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (_c *MessageCreate) Mutation() *MessageMutation {
	return _c.mutation
}

// Save creates the Message in the database.
func (_c *MessageCreate) Save(ctx context.Context) (*Message, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *MessageCreate) SaveX(ctx context.Context) *Message {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MessageCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MessageCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *MessageCreate) defaults() {
	if _, ok := _c.mutation.GetType(); !ok {
		v := message.DefaultType
		_c.mutation.SetType(v)
	}
	if _, ok := _c.mutation.IsRead(); !ok {
		v := message.DefaultIsRead
		_c.mutation.SetIsRead(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := message.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := message.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.IsDeleted(); !ok {
		v := message.DefaultIsDeleted
		_c.mutation.SetIsDeleted(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := message.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *MessageCreate) check() error {
	if _, ok := _c.mutation.ConnectionID(); !ok {
		return &ValidationError{Name: "connection_id", err: errors.New(`ent: missing required field "Message.connection_id"`)}
	}
	if _, ok := _c.mutation.SenderID(); !ok {
		return &ValidationError{Name: "sender_id", err: errors.New(`ent: missing required field "Message.sender_id"`)}
	}
	if _, ok := _c.mutation.ReceiverID(); !ok {
		return &ValidationError{Name: "receiver_id", err: errors.New(`ent: missing required field "Message.receiver_id"`)}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Message.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := message.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Message.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsRead(); !ok {
		return &ValidationError{Name: "is_read", err: errors.New(`ent: missing required field "Message.is_read"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Message.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Message.updated_at"`)}
	}
	if _, ok := _c.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "Message.is_deleted"`)}
	}
	if len(_c.mutation.ConnectionIDs()) == 0 {
		return &ValidationError{Name: "connection", err: errors.New(`ent: missing required edge "Message.connection"`)}
	}
	if len(_c.mutation.SenderIDs()) == 0 {
		return &ValidationError{Name: "sender", err: errors.New(`ent: missing required edge "Message.sender"`)}
	}
	if len(_c.mutation.ReceiverIDs()) == 0 {
		return &ValidationError{Name: "receiver", err: errors.New(`ent: missing required edge "Message.receiver"`)}
	}
	return nil
}

func (_c *MessageCreate) sqlSave(ctx context.Context) (*Message, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *MessageCreate) createSpec() (*Message, *sqlgraph.CreateSpec) {
	var (
		_node = &Message{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(message.Table, sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(message.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Content(); ok {
		_spec.SetField(message.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := _c.mutation.MediaURL(); ok {
		_spec.SetField(message.FieldMediaURL, field.TypeString, value)
		_node.MediaURL = value
	}
	if value, ok := _c.mutation.MediaType(); ok {
		_spec.SetField(message.FieldMediaType, field.TypeString, value)
		_node.MediaType = value
	}
	if value, ok := _c.mutation.MediaPublicID(); ok {
		_spec.SetField(message.FieldMediaPublicID, field.TypeString, value)
		_node.MediaPublicID = value
	}
	if value, ok := _c.mutation.IsRead(); ok {
		_spec.SetField(message.FieldIsRead, field.TypeBool, value)
		_node.IsRead = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(message.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(message.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.ReadAt(); ok {
		_spec.SetField(message.FieldReadAt, field.TypeTime, value)
		_node.ReadAt = value
	}
	if value, ok := _c.mutation.IsDeleted(); ok {
		_spec.SetField(message.FieldIsDeleted, field.TypeBool, value)
		_node.IsDeleted = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(message.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := _c.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.ConnectionTable,
			Columns: []string{message.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ConnectionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.SenderTable,
			Columns: []string{message.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SenderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.ReceiverTable,
			Columns: []string{message.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReceiverID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MessageCreateBulk is the builder for creating many Message entities in bulk.
type MessageCreateBulk struct {
	config
	err      error
	builders []*MessageCreate
}

// Save creates the Message entities in the database.
func (_c *MessageCreateBulk) Save(ctx context.Context) ([]*Message, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Message, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *MessageCreateBulk) SaveX(ctx context.Context) []*Message {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MessageCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MessageCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
