// Code generated by ent, DO NOT EDIT.

package user

import (
	"match-me/ent/predicate"
	"match-me/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// PasswordHash applies equality check predicate on the "password_hash" field. It's identical to PasswordHashEQ.
func PasswordHash(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordHash, v))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAge, v))
}

// PreferredAgeMin applies equality check predicate on the "preferred_age_min" field. It's identical to PreferredAgeMinEQ.
func PreferredAgeMin(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPreferredAgeMin, v))
}

// PreferredAgeMax applies equality check predicate on the "preferred_age_max" field. It's identical to PreferredAgeMaxEQ.
func PreferredAgeMax(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPreferredAgeMax, v))
}

// ProfileCompletion applies equality check predicate on the "profile_completion" field. It's identical to ProfileCompletionEQ.
func ProfileCompletion(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProfileCompletion, v))
}

// Coordinates applies equality check predicate on the "coordinates" field. It's identical to CoordinatesEQ.
func Coordinates(v *schema.Point) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCoordinates, v))
}

// CommunicationStyle applies equality check predicate on the "communication_style" field. It's identical to CommunicationStyleEQ.
func CommunicationStyle(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCommunicationStyle, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// PasswordHashEQ applies the EQ predicate on the "password_hash" field.
func PasswordHashEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordHash, v))
}

// PasswordHashNEQ applies the NEQ predicate on the "password_hash" field.
func PasswordHashNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPasswordHash, v))
}

// PasswordHashIn applies the In predicate on the "password_hash" field.
func PasswordHashIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPasswordHash, vs...))
}

// PasswordHashNotIn applies the NotIn predicate on the "password_hash" field.
func PasswordHashNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPasswordHash, vs...))
}

// PasswordHashGT applies the GT predicate on the "password_hash" field.
func PasswordHashGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPasswordHash, v))
}

// PasswordHashGTE applies the GTE predicate on the "password_hash" field.
func PasswordHashGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPasswordHash, v))
}

// PasswordHashLT applies the LT predicate on the "password_hash" field.
func PasswordHashLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPasswordHash, v))
}

// PasswordHashLTE applies the LTE predicate on the "password_hash" field.
func PasswordHashLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPasswordHash, v))
}

// PasswordHashContains applies the Contains predicate on the "password_hash" field.
func PasswordHashContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPasswordHash, v))
}

// PasswordHashHasPrefix applies the HasPrefix predicate on the "password_hash" field.
func PasswordHashHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPasswordHash, v))
}

// PasswordHashHasSuffix applies the HasSuffix predicate on the "password_hash" field.
func PasswordHashHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPasswordHash, v))
}

// PasswordHashEqualFold applies the EqualFold predicate on the "password_hash" field.
func PasswordHashEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPasswordHash, v))
}

// PasswordHashContainsFold applies the ContainsFold predicate on the "password_hash" field.
func PasswordHashContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPasswordHash, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLastName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAge, v))
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAge, v))
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldAge, vs...))
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAge, vs...))
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldAge, v))
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAge, v))
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldAge, v))
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAge, v))
}

// PreferredAgeMinEQ applies the EQ predicate on the "preferred_age_min" field.
func PreferredAgeMinEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPreferredAgeMin, v))
}

// PreferredAgeMinNEQ applies the NEQ predicate on the "preferred_age_min" field.
func PreferredAgeMinNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPreferredAgeMin, v))
}

// PreferredAgeMinIn applies the In predicate on the "preferred_age_min" field.
func PreferredAgeMinIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldPreferredAgeMin, vs...))
}

// PreferredAgeMinNotIn applies the NotIn predicate on the "preferred_age_min" field.
func PreferredAgeMinNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPreferredAgeMin, vs...))
}

// PreferredAgeMinGT applies the GT predicate on the "preferred_age_min" field.
func PreferredAgeMinGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldPreferredAgeMin, v))
}

// PreferredAgeMinGTE applies the GTE predicate on the "preferred_age_min" field.
func PreferredAgeMinGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPreferredAgeMin, v))
}

// PreferredAgeMinLT applies the LT predicate on the "preferred_age_min" field.
func PreferredAgeMinLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldPreferredAgeMin, v))
}

// PreferredAgeMinLTE applies the LTE predicate on the "preferred_age_min" field.
func PreferredAgeMinLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPreferredAgeMin, v))
}

// PreferredAgeMinIsNil applies the IsNil predicate on the "preferred_age_min" field.
func PreferredAgeMinIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPreferredAgeMin))
}

// PreferredAgeMinNotNil applies the NotNil predicate on the "preferred_age_min" field.
func PreferredAgeMinNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPreferredAgeMin))
}

// PreferredAgeMaxEQ applies the EQ predicate on the "preferred_age_max" field.
func PreferredAgeMaxEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPreferredAgeMax, v))
}

// PreferredAgeMaxNEQ applies the NEQ predicate on the "preferred_age_max" field.
func PreferredAgeMaxNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPreferredAgeMax, v))
}

// PreferredAgeMaxIn applies the In predicate on the "preferred_age_max" field.
func PreferredAgeMaxIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldPreferredAgeMax, vs...))
}

// PreferredAgeMaxNotIn applies the NotIn predicate on the "preferred_age_max" field.
func PreferredAgeMaxNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPreferredAgeMax, vs...))
}

// PreferredAgeMaxGT applies the GT predicate on the "preferred_age_max" field.
func PreferredAgeMaxGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldPreferredAgeMax, v))
}

// PreferredAgeMaxGTE applies the GTE predicate on the "preferred_age_max" field.
func PreferredAgeMaxGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPreferredAgeMax, v))
}

// PreferredAgeMaxLT applies the LT predicate on the "preferred_age_max" field.
func PreferredAgeMaxLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldPreferredAgeMax, v))
}

// PreferredAgeMaxLTE applies the LTE predicate on the "preferred_age_max" field.
func PreferredAgeMaxLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPreferredAgeMax, v))
}

// PreferredAgeMaxIsNil applies the IsNil predicate on the "preferred_age_max" field.
func PreferredAgeMaxIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPreferredAgeMax))
}

// PreferredAgeMaxNotNil applies the NotNil predicate on the "preferred_age_max" field.
func PreferredAgeMaxNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPreferredAgeMax))
}

// ProfileCompletionEQ applies the EQ predicate on the "profile_completion" field.
func ProfileCompletionEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProfileCompletion, v))
}

// ProfileCompletionNEQ applies the NEQ predicate on the "profile_completion" field.
func ProfileCompletionNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldProfileCompletion, v))
}

// ProfileCompletionIn applies the In predicate on the "profile_completion" field.
func ProfileCompletionIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldProfileCompletion, vs...))
}

// ProfileCompletionNotIn applies the NotIn predicate on the "profile_completion" field.
func ProfileCompletionNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldProfileCompletion, vs...))
}

// ProfileCompletionGT applies the GT predicate on the "profile_completion" field.
func ProfileCompletionGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldProfileCompletion, v))
}

// ProfileCompletionGTE applies the GTE predicate on the "profile_completion" field.
func ProfileCompletionGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldProfileCompletion, v))
}

// ProfileCompletionLT applies the LT predicate on the "profile_completion" field.
func ProfileCompletionLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldProfileCompletion, v))
}

// ProfileCompletionLTE applies the LTE predicate on the "profile_completion" field.
func ProfileCompletionLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldProfileCompletion, v))
}

// ProfileCompletionIsNil applies the IsNil predicate on the "profile_completion" field.
func ProfileCompletionIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldProfileCompletion))
}

// ProfileCompletionNotNil applies the NotNil predicate on the "profile_completion" field.
func ProfileCompletionNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldProfileCompletion))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v Gender) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v Gender) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...Gender) predicate.User {
	return predicate.User(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...Gender) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGender, vs...))
}

// PreferredGenderEQ applies the EQ predicate on the "preferred_gender" field.
func PreferredGenderEQ(v PreferredGender) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPreferredGender, v))
}

// PreferredGenderNEQ applies the NEQ predicate on the "preferred_gender" field.
func PreferredGenderNEQ(v PreferredGender) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPreferredGender, v))
}

// PreferredGenderIn applies the In predicate on the "preferred_gender" field.
func PreferredGenderIn(vs ...PreferredGender) predicate.User {
	return predicate.User(sql.FieldIn(FieldPreferredGender, vs...))
}

// PreferredGenderNotIn applies the NotIn predicate on the "preferred_gender" field.
func PreferredGenderNotIn(vs ...PreferredGender) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPreferredGender, vs...))
}

// CoordinatesEQ applies the EQ predicate on the "coordinates" field.
func CoordinatesEQ(v *schema.Point) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCoordinates, v))
}

// CoordinatesNEQ applies the NEQ predicate on the "coordinates" field.
func CoordinatesNEQ(v *schema.Point) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCoordinates, v))
}

// CoordinatesIn applies the In predicate on the "coordinates" field.
func CoordinatesIn(vs ...*schema.Point) predicate.User {
	return predicate.User(sql.FieldIn(FieldCoordinates, vs...))
}

// CoordinatesNotIn applies the NotIn predicate on the "coordinates" field.
func CoordinatesNotIn(vs ...*schema.Point) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCoordinates, vs...))
}

// CoordinatesGT applies the GT predicate on the "coordinates" field.
func CoordinatesGT(v *schema.Point) predicate.User {
	return predicate.User(sql.FieldGT(FieldCoordinates, v))
}

// CoordinatesGTE applies the GTE predicate on the "coordinates" field.
func CoordinatesGTE(v *schema.Point) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCoordinates, v))
}

// CoordinatesLT applies the LT predicate on the "coordinates" field.
func CoordinatesLT(v *schema.Point) predicate.User {
	return predicate.User(sql.FieldLT(FieldCoordinates, v))
}

// CoordinatesLTE applies the LTE predicate on the "coordinates" field.
func CoordinatesLTE(v *schema.Point) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCoordinates, v))
}

// CoordinatesIsNil applies the IsNil predicate on the "coordinates" field.
func CoordinatesIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCoordinates))
}

// CoordinatesNotNil applies the NotNil predicate on the "coordinates" field.
func CoordinatesNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCoordinates))
}

// LookingForIsNil applies the IsNil predicate on the "looking_for" field.
func LookingForIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLookingFor))
}

// LookingForNotNil applies the NotNil predicate on the "looking_for" field.
func LookingForNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLookingFor))
}

// InterestsIsNil applies the IsNil predicate on the "interests" field.
func InterestsIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldInterests))
}

// InterestsNotNil applies the NotNil predicate on the "interests" field.
func InterestsNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldInterests))
}

// MusicPreferencesIsNil applies the IsNil predicate on the "music_preferences" field.
func MusicPreferencesIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldMusicPreferences))
}

// MusicPreferencesNotNil applies the NotNil predicate on the "music_preferences" field.
func MusicPreferencesNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldMusicPreferences))
}

// FoodPreferencesIsNil applies the IsNil predicate on the "food_preferences" field.
func FoodPreferencesIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldFoodPreferences))
}

// FoodPreferencesNotNil applies the NotNil predicate on the "food_preferences" field.
func FoodPreferencesNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldFoodPreferences))
}

// CommunicationStyleEQ applies the EQ predicate on the "communication_style" field.
func CommunicationStyleEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCommunicationStyle, v))
}

// CommunicationStyleNEQ applies the NEQ predicate on the "communication_style" field.
func CommunicationStyleNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCommunicationStyle, v))
}

// CommunicationStyleIn applies the In predicate on the "communication_style" field.
func CommunicationStyleIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCommunicationStyle, vs...))
}

// CommunicationStyleNotIn applies the NotIn predicate on the "communication_style" field.
func CommunicationStyleNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCommunicationStyle, vs...))
}

// CommunicationStyleGT applies the GT predicate on the "communication_style" field.
func CommunicationStyleGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCommunicationStyle, v))
}

// CommunicationStyleGTE applies the GTE predicate on the "communication_style" field.
func CommunicationStyleGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCommunicationStyle, v))
}

// CommunicationStyleLT applies the LT predicate on the "communication_style" field.
func CommunicationStyleLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCommunicationStyle, v))
}

// CommunicationStyleLTE applies the LTE predicate on the "communication_style" field.
func CommunicationStyleLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCommunicationStyle, v))
}

// CommunicationStyleContains applies the Contains predicate on the "communication_style" field.
func CommunicationStyleContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCommunicationStyle, v))
}

// CommunicationStyleHasPrefix applies the HasPrefix predicate on the "communication_style" field.
func CommunicationStyleHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCommunicationStyle, v))
}

// CommunicationStyleHasSuffix applies the HasSuffix predicate on the "communication_style" field.
func CommunicationStyleHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCommunicationStyle, v))
}

// CommunicationStyleIsNil applies the IsNil predicate on the "communication_style" field.
func CommunicationStyleIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCommunicationStyle))
}

// CommunicationStyleNotNil applies the NotNil predicate on the "communication_style" field.
func CommunicationStyleNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCommunicationStyle))
}

// CommunicationStyleEqualFold applies the EqualFold predicate on the "communication_style" field.
func CommunicationStyleEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCommunicationStyle, v))
}

// CommunicationStyleContainsFold applies the ContainsFold predicate on the "communication_style" field.
func CommunicationStyleContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCommunicationStyle, v))
}

// PromptsIsNil applies the IsNil predicate on the "prompts" field.
func PromptsIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPrompts))
}

// PromptsNotNil applies the NotNil predicate on the "prompts" field.
func PromptsNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPrompts))
}

// HasPhotos applies the HasEdge predicate on the "photos" edge.
func HasPhotos() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PhotosTable, PhotosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPhotosWith applies the HasEdge predicate on the "photos" edge with a given conditions (other predicates).
func HasPhotosWith(preds ...predicate.UserPhoto) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPhotosStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
