// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldAboutMe holds the string denoting the about_me field in the database.
	FieldAboutMe = "about_me"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldPreferredAgeMin holds the string denoting the preferred_age_min field in the database.
	FieldPreferredAgeMin = "preferred_age_min"
	// FieldPreferredAgeMax holds the string denoting the preferred_age_max field in the database.
	FieldPreferredAgeMax = "preferred_age_max"
	// FieldProfileCompletion holds the string denoting the profile_completion field in the database.
	FieldProfileCompletion = "profile_completion"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldPreferredGender holds the string denoting the preferred_gender field in the database.
	FieldPreferredGender = "preferred_gender"
	// FieldCoordinates holds the string denoting the coordinates field in the database.
	FieldCoordinates = "coordinates"
	// FieldPreferredDistance holds the string denoting the preferred_distance field in the database.
	FieldPreferredDistance = "preferred_distance"
	// FieldLookingFor holds the string denoting the looking_for field in the database.
	FieldLookingFor = "looking_for"
	// FieldInterests holds the string denoting the interests field in the database.
	FieldInterests = "interests"
	// FieldMusicPreferences holds the string denoting the music_preferences field in the database.
	FieldMusicPreferences = "music_preferences"
	// FieldFoodPreferences holds the string denoting the food_preferences field in the database.
	FieldFoodPreferences = "food_preferences"
	// FieldCommunicationStyle holds the string denoting the communication_style field in the database.
	FieldCommunicationStyle = "communication_style"
	// FieldPrompts holds the string denoting the prompts field in the database.
	FieldPrompts = "prompts"
	// EdgePhotos holds the string denoting the photos edge name in mutations.
	EdgePhotos = "photos"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PhotosTable is the table that holds the photos relation/edge.
	PhotosTable = "user_photos"
	// PhotosInverseTable is the table name for the UserPhoto entity.
	// It exists in this package in order to avoid circular dependency with the "userphoto" package.
	PhotosInverseTable = "user_photos"
	// PhotosColumn is the table column denoting the photos relation/edge.
	PhotosColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldPasswordHash,
	FieldFirstName,
	FieldLastName,
	FieldAboutMe,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAge,
	FieldPreferredAgeMin,
	FieldPreferredAgeMax,
	FieldProfileCompletion,
	FieldGender,
	FieldPreferredGender,
	FieldCoordinates,
	FieldPreferredDistance,
	FieldLookingFor,
	FieldInterests,
	FieldMusicPreferences,
	FieldFoodPreferences,
	FieldCommunicationStyle,
	FieldPrompts,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	PasswordHashValidator func(string) error
	// FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// AgeValidator is a validator for the "age" field. It is called by the builders before save.
	AgeValidator func(int) error
	// PreferredAgeMinValidator is a validator for the "preferred_age_min" field. It is called by the builders before save.
	PreferredAgeMinValidator func(int) error
	// PreferredAgeMaxValidator is a validator for the "preferred_age_max" field. It is called by the builders before save.
	PreferredAgeMaxValidator func(int) error
	// ProfileCompletionValidator is a validator for the "profile_completion" field. It is called by the builders before save.
	ProfileCompletionValidator func(int) error
	// PreferredDistanceValidator is a validator for the "preferred_distance" field. It is called by the builders before save.
	PreferredDistanceValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Gender defines the type for the "gender" enum field.
type Gender string

// Gender values.
const (
	GenderMale           Gender = "male"
	GenderFemale         Gender = "female"
	GenderNonBinary      Gender = "non_binary"
	GenderPreferNotToSay Gender = "prefer_not_to_say"
)

func (ge Gender) String() string {
	return string(ge)
}

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge Gender) error {
	switch ge {
	case GenderMale, GenderFemale, GenderNonBinary, GenderPreferNotToSay:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for gender field: %q", ge)
	}
}

// PreferredGender defines the type for the "preferred_gender" enum field.
type PreferredGender string

// PreferredGenderAll is the default value of the PreferredGender enum.
const DefaultPreferredGender = PreferredGenderAll

// PreferredGender values.
const (
	PreferredGenderMale      PreferredGender = "male"
	PreferredGenderFemale    PreferredGender = "female"
	PreferredGenderNonBinary PreferredGender = "non_binary"
	PreferredGenderAll       PreferredGender = "all"
)

func (pg PreferredGender) String() string {
	return string(pg)
}

// PreferredGenderValidator is a validator for the "preferred_gender" field enum values. It is called by the builders before save.
func PreferredGenderValidator(pg PreferredGender) error {
	switch pg {
	case PreferredGenderMale, PreferredGenderFemale, PreferredGenderNonBinary, PreferredGenderAll:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for preferred_gender field: %q", pg)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPasswordHash orders the results by the password_hash field.
func ByPasswordHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordHash, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByAboutMe orders the results by the about_me field.
func ByAboutMe(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAboutMe, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAge orders the results by the age field.
func ByAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAge, opts...).ToFunc()
}

// ByPreferredAgeMin orders the results by the preferred_age_min field.
func ByPreferredAgeMin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPreferredAgeMin, opts...).ToFunc()
}

// ByPreferredAgeMax orders the results by the preferred_age_max field.
func ByPreferredAgeMax(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPreferredAgeMax, opts...).ToFunc()
}

// ByProfileCompletion orders the results by the profile_completion field.
func ByProfileCompletion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileCompletion, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByPreferredGender orders the results by the preferred_gender field.
func ByPreferredGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPreferredGender, opts...).ToFunc()
}

// ByCoordinates orders the results by the coordinates field.
func ByCoordinates(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoordinates, opts...).ToFunc()
}

// ByPreferredDistance orders the results by the preferred_distance field.
func ByPreferredDistance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPreferredDistance, opts...).ToFunc()
}

// ByCommunicationStyle orders the results by the communication_style field.
func ByCommunicationStyle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommunicationStyle, opts...).ToFunc()
}

// ByPhotosCount orders the results by photos count.
func ByPhotosCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPhotosStep(), opts...)
	}
}

// ByPhotos orders the results by photos terms.
func ByPhotos(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPhotosStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPhotosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PhotosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PhotosTable, PhotosColumn),
	)
}
