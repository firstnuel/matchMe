// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"match-me/ent/predicate"
	"match-me/ent/schema"
	"match-me/ent/user"
	"match-me/ent/userphoto"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPasswordHash sets the "password_hash" field.
func (_u *UserUpdate) SetPasswordHash(v string) *UserUpdate {
	_u.mutation.SetPasswordHash(v)
	return _u
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePasswordHash(v *string) *UserUpdate {
	if v != nil {
		_u.SetPasswordHash(*v)
	}
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *UserUpdate) SetFirstName(v string) *UserUpdate {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableFirstName(v *string) *UserUpdate {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *UserUpdate) SetLastName(v string) *UserUpdate {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastName(v *string) *UserUpdate {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdate) SetUpdatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetAge sets the "age" field.
func (_u *UserUpdate) SetAge(v int) *UserUpdate {
	_u.mutation.ResetAge()
	_u.mutation.SetAge(v)
	return _u
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAge(v *int) *UserUpdate {
	if v != nil {
		_u.SetAge(*v)
	}
	return _u
}

// AddAge adds value to the "age" field.
func (_u *UserUpdate) AddAge(v int) *UserUpdate {
	_u.mutation.AddAge(v)
	return _u
}

// SetPreferredAgeMin sets the "preferred_age_min" field.
func (_u *UserUpdate) SetPreferredAgeMin(v int) *UserUpdate {
	_u.mutation.ResetPreferredAgeMin()
	_u.mutation.SetPreferredAgeMin(v)
	return _u
}

// SetNillablePreferredAgeMin sets the "preferred_age_min" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePreferredAgeMin(v *int) *UserUpdate {
	if v != nil {
		_u.SetPreferredAgeMin(*v)
	}
	return _u
}

// AddPreferredAgeMin adds value to the "preferred_age_min" field.
func (_u *UserUpdate) AddPreferredAgeMin(v int) *UserUpdate {
	_u.mutation.AddPreferredAgeMin(v)
	return _u
}

// ClearPreferredAgeMin clears the value of the "preferred_age_min" field.
func (_u *UserUpdate) ClearPreferredAgeMin() *UserUpdate {
	_u.mutation.ClearPreferredAgeMin()
	return _u
}

// SetPreferredAgeMax sets the "preferred_age_max" field.
func (_u *UserUpdate) SetPreferredAgeMax(v int) *UserUpdate {
	_u.mutation.ResetPreferredAgeMax()
	_u.mutation.SetPreferredAgeMax(v)
	return _u
}

// SetNillablePreferredAgeMax sets the "preferred_age_max" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePreferredAgeMax(v *int) *UserUpdate {
	if v != nil {
		_u.SetPreferredAgeMax(*v)
	}
	return _u
}

// AddPreferredAgeMax adds value to the "preferred_age_max" field.
func (_u *UserUpdate) AddPreferredAgeMax(v int) *UserUpdate {
	_u.mutation.AddPreferredAgeMax(v)
	return _u
}

// ClearPreferredAgeMax clears the value of the "preferred_age_max" field.
func (_u *UserUpdate) ClearPreferredAgeMax() *UserUpdate {
	_u.mutation.ClearPreferredAgeMax()
	return _u
}

// SetProfileCompletion sets the "profile_completion" field.
func (_u *UserUpdate) SetProfileCompletion(v int) *UserUpdate {
	_u.mutation.ResetProfileCompletion()
	_u.mutation.SetProfileCompletion(v)
	return _u
}

// SetNillableProfileCompletion sets the "profile_completion" field if the given value is not nil.
func (_u *UserUpdate) SetNillableProfileCompletion(v *int) *UserUpdate {
	if v != nil {
		_u.SetProfileCompletion(*v)
	}
	return _u
}

// AddProfileCompletion adds value to the "profile_completion" field.
func (_u *UserUpdate) AddProfileCompletion(v int) *UserUpdate {
	_u.mutation.AddProfileCompletion(v)
	return _u
}

// ClearProfileCompletion clears the value of the "profile_completion" field.
func (_u *UserUpdate) ClearProfileCompletion() *UserUpdate {
	_u.mutation.ClearProfileCompletion()
	return _u
}

// SetGender sets the "gender" field.
func (_u *UserUpdate) SetGender(v user.Gender) *UserUpdate {
	_u.mutation.SetGender(v)
	return _u
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (_u *UserUpdate) SetNillableGender(v *user.Gender) *UserUpdate {
	if v != nil {
		_u.SetGender(*v)
	}
	return _u
}

// SetPreferredGender sets the "preferred_gender" field.
func (_u *UserUpdate) SetPreferredGender(v user.PreferredGender) *UserUpdate {
	_u.mutation.SetPreferredGender(v)
	return _u
}

// SetNillablePreferredGender sets the "preferred_gender" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePreferredGender(v *user.PreferredGender) *UserUpdate {
	if v != nil {
		_u.SetPreferredGender(*v)
	}
	return _u
}

// SetCoordinates sets the "coordinates" field.
func (_u *UserUpdate) SetCoordinates(v *schema.Point) *UserUpdate {
	_u.mutation.SetCoordinates(v)
	return _u
}

// ClearCoordinates clears the value of the "coordinates" field.
func (_u *UserUpdate) ClearCoordinates() *UserUpdate {
	_u.mutation.ClearCoordinates()
	return _u
}

// SetLookingFor sets the "looking_for" field.
func (_u *UserUpdate) SetLookingFor(v []string) *UserUpdate {
	_u.mutation.SetLookingFor(v)
	return _u
}

// AppendLookingFor appends value to the "looking_for" field.
func (_u *UserUpdate) AppendLookingFor(v []string) *UserUpdate {
	_u.mutation.AppendLookingFor(v)
	return _u
}

// ClearLookingFor clears the value of the "looking_for" field.
func (_u *UserUpdate) ClearLookingFor() *UserUpdate {
	_u.mutation.ClearLookingFor()
	return _u
}

// SetInterests sets the "interests" field.
func (_u *UserUpdate) SetInterests(v []string) *UserUpdate {
	_u.mutation.SetInterests(v)
	return _u
}

// AppendInterests appends value to the "interests" field.
func (_u *UserUpdate) AppendInterests(v []string) *UserUpdate {
	_u.mutation.AppendInterests(v)
	return _u
}

// ClearInterests clears the value of the "interests" field.
func (_u *UserUpdate) ClearInterests() *UserUpdate {
	_u.mutation.ClearInterests()
	return _u
}

// SetMusicPreferences sets the "music_preferences" field.
func (_u *UserUpdate) SetMusicPreferences(v []string) *UserUpdate {
	_u.mutation.SetMusicPreferences(v)
	return _u
}

// AppendMusicPreferences appends value to the "music_preferences" field.
func (_u *UserUpdate) AppendMusicPreferences(v []string) *UserUpdate {
	_u.mutation.AppendMusicPreferences(v)
	return _u
}

// ClearMusicPreferences clears the value of the "music_preferences" field.
func (_u *UserUpdate) ClearMusicPreferences() *UserUpdate {
	_u.mutation.ClearMusicPreferences()
	return _u
}

// SetFoodPreferences sets the "food_preferences" field.
func (_u *UserUpdate) SetFoodPreferences(v []string) *UserUpdate {
	_u.mutation.SetFoodPreferences(v)
	return _u
}

// AppendFoodPreferences appends value to the "food_preferences" field.
func (_u *UserUpdate) AppendFoodPreferences(v []string) *UserUpdate {
	_u.mutation.AppendFoodPreferences(v)
	return _u
}

// ClearFoodPreferences clears the value of the "food_preferences" field.
func (_u *UserUpdate) ClearFoodPreferences() *UserUpdate {
	_u.mutation.ClearFoodPreferences()
	return _u
}

// SetCommunicationStyle sets the "communication_style" field.
func (_u *UserUpdate) SetCommunicationStyle(v string) *UserUpdate {
	_u.mutation.SetCommunicationStyle(v)
	return _u
}

// SetNillableCommunicationStyle sets the "communication_style" field if the given value is not nil.
func (_u *UserUpdate) SetNillableCommunicationStyle(v *string) *UserUpdate {
	if v != nil {
		_u.SetCommunicationStyle(*v)
	}
	return _u
}

// ClearCommunicationStyle clears the value of the "communication_style" field.
func (_u *UserUpdate) ClearCommunicationStyle() *UserUpdate {
	_u.mutation.ClearCommunicationStyle()
	return _u
}

// SetPrompts sets the "prompts" field.
func (_u *UserUpdate) SetPrompts(v []schema.Prompt) *UserUpdate {
	_u.mutation.SetPrompts(v)
	return _u
}

// AppendPrompts appends value to the "prompts" field.
func (_u *UserUpdate) AppendPrompts(v []schema.Prompt) *UserUpdate {
	_u.mutation.AppendPrompts(v)
	return _u
}

// ClearPrompts clears the value of the "prompts" field.
func (_u *UserUpdate) ClearPrompts() *UserUpdate {
	_u.mutation.ClearPrompts()
	return _u
}

// AddPhotoIDs adds the "photos" edge to the UserPhoto entity by IDs.
func (_u *UserUpdate) AddPhotoIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.AddPhotoIDs(ids...)
	return _u
}

// AddPhotos adds the "photos" edges to the UserPhoto entity.
func (_u *UserUpdate) AddPhotos(v ...*UserPhoto) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPhotoIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearPhotos clears all "photos" edges to the UserPhoto entity.
func (_u *UserUpdate) ClearPhotos() *UserUpdate {
	_u.mutation.ClearPhotos()
	return _u
}

// RemovePhotoIDs removes the "photos" edge to UserPhoto entities by IDs.
func (_u *UserUpdate) RemovePhotoIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.RemovePhotoIDs(ids...)
	return _u
}

// RemovePhotos removes "photos" edges to UserPhoto entities.
func (_u *UserUpdate) RemovePhotos(v ...*UserPhoto) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePhotoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdate) check() error {
	if v, ok := _u.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "User.password_hash": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Age(); ok {
		if err := user.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "User.age": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PreferredAgeMin(); ok {
		if err := user.PreferredAgeMinValidator(v); err != nil {
			return &ValidationError{Name: "preferred_age_min", err: fmt.Errorf(`ent: validator failed for field "User.preferred_age_min": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PreferredAgeMax(); ok {
		if err := user.PreferredAgeMaxValidator(v); err != nil {
			return &ValidationError{Name: "preferred_age_max", err: fmt.Errorf(`ent: validator failed for field "User.preferred_age_max": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProfileCompletion(); ok {
		if err := user.ProfileCompletionValidator(v); err != nil {
			return &ValidationError{Name: "profile_completion", err: fmt.Errorf(`ent: validator failed for field "User.profile_completion": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "User.gender": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PreferredGender(); ok {
		if err := user.PreferredGenderValidator(v); err != nil {
			return &ValidationError{Name: "preferred_gender", err: fmt.Errorf(`ent: validator failed for field "User.preferred_gender": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAge(); ok {
		_spec.AddField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := _u.mutation.PreferredAgeMin(); ok {
		_spec.SetField(user.FieldPreferredAgeMin, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPreferredAgeMin(); ok {
		_spec.AddField(user.FieldPreferredAgeMin, field.TypeInt, value)
	}
	if _u.mutation.PreferredAgeMinCleared() {
		_spec.ClearField(user.FieldPreferredAgeMin, field.TypeInt)
	}
	if value, ok := _u.mutation.PreferredAgeMax(); ok {
		_spec.SetField(user.FieldPreferredAgeMax, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPreferredAgeMax(); ok {
		_spec.AddField(user.FieldPreferredAgeMax, field.TypeInt, value)
	}
	if _u.mutation.PreferredAgeMaxCleared() {
		_spec.ClearField(user.FieldPreferredAgeMax, field.TypeInt)
	}
	if value, ok := _u.mutation.ProfileCompletion(); ok {
		_spec.SetField(user.FieldProfileCompletion, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedProfileCompletion(); ok {
		_spec.AddField(user.FieldProfileCompletion, field.TypeInt, value)
	}
	if _u.mutation.ProfileCompletionCleared() {
		_spec.ClearField(user.FieldProfileCompletion, field.TypeInt)
	}
	if value, ok := _u.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.PreferredGender(); ok {
		_spec.SetField(user.FieldPreferredGender, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Coordinates(); ok {
		_spec.SetField(user.FieldCoordinates, field.TypeOther, value)
	}
	if _u.mutation.CoordinatesCleared() {
		_spec.ClearField(user.FieldCoordinates, field.TypeOther)
	}
	if value, ok := _u.mutation.LookingFor(); ok {
		_spec.SetField(user.FieldLookingFor, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedLookingFor(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldLookingFor, value)
		})
	}
	if _u.mutation.LookingForCleared() {
		_spec.ClearField(user.FieldLookingFor, field.TypeJSON)
	}
	if value, ok := _u.mutation.Interests(); ok {
		_spec.SetField(user.FieldInterests, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedInterests(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldInterests, value)
		})
	}
	if _u.mutation.InterestsCleared() {
		_spec.ClearField(user.FieldInterests, field.TypeJSON)
	}
	if value, ok := _u.mutation.MusicPreferences(); ok {
		_spec.SetField(user.FieldMusicPreferences, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMusicPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldMusicPreferences, value)
		})
	}
	if _u.mutation.MusicPreferencesCleared() {
		_spec.ClearField(user.FieldMusicPreferences, field.TypeJSON)
	}
	if value, ok := _u.mutation.FoodPreferences(); ok {
		_spec.SetField(user.FieldFoodPreferences, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedFoodPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldFoodPreferences, value)
		})
	}
	if _u.mutation.FoodPreferencesCleared() {
		_spec.ClearField(user.FieldFoodPreferences, field.TypeJSON)
	}
	if value, ok := _u.mutation.CommunicationStyle(); ok {
		_spec.SetField(user.FieldCommunicationStyle, field.TypeString, value)
	}
	if _u.mutation.CommunicationStyleCleared() {
		_spec.ClearField(user.FieldCommunicationStyle, field.TypeString)
	}
	if value, ok := _u.mutation.Prompts(); ok {
		_spec.SetField(user.FieldPrompts, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedPrompts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldPrompts, value)
		})
	}
	if _u.mutation.PromptsCleared() {
		_spec.ClearField(user.FieldPrompts, field.TypeJSON)
	}
	if _u.mutation.PhotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PhotosTable,
			Columns: []string{user.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userphoto.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPhotosIDs(); len(nodes) > 0 && !_u.mutation.PhotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PhotosTable,
			Columns: []string{user.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userphoto.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PhotosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PhotosTable,
			Columns: []string{user.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userphoto.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPasswordHash sets the "password_hash" field.
func (_u *UserUpdateOne) SetPasswordHash(v string) *UserUpdateOne {
	_u.mutation.SetPasswordHash(v)
	return _u
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePasswordHash(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPasswordHash(*v)
	}
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *UserUpdateOne) SetFirstName(v string) *UserUpdateOne {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableFirstName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *UserUpdateOne) SetLastName(v string) *UserUpdateOne {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdateOne) SetUpdatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetAge sets the "age" field.
func (_u *UserUpdateOne) SetAge(v int) *UserUpdateOne {
	_u.mutation.ResetAge()
	_u.mutation.SetAge(v)
	return _u
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAge(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetAge(*v)
	}
	return _u
}

// AddAge adds value to the "age" field.
func (_u *UserUpdateOne) AddAge(v int) *UserUpdateOne {
	_u.mutation.AddAge(v)
	return _u
}

// SetPreferredAgeMin sets the "preferred_age_min" field.
func (_u *UserUpdateOne) SetPreferredAgeMin(v int) *UserUpdateOne {
	_u.mutation.ResetPreferredAgeMin()
	_u.mutation.SetPreferredAgeMin(v)
	return _u
}

// SetNillablePreferredAgeMin sets the "preferred_age_min" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePreferredAgeMin(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetPreferredAgeMin(*v)
	}
	return _u
}

// AddPreferredAgeMin adds value to the "preferred_age_min" field.
func (_u *UserUpdateOne) AddPreferredAgeMin(v int) *UserUpdateOne {
	_u.mutation.AddPreferredAgeMin(v)
	return _u
}

// ClearPreferredAgeMin clears the value of the "preferred_age_min" field.
func (_u *UserUpdateOne) ClearPreferredAgeMin() *UserUpdateOne {
	_u.mutation.ClearPreferredAgeMin()
	return _u
}

// SetPreferredAgeMax sets the "preferred_age_max" field.
func (_u *UserUpdateOne) SetPreferredAgeMax(v int) *UserUpdateOne {
	_u.mutation.ResetPreferredAgeMax()
	_u.mutation.SetPreferredAgeMax(v)
	return _u
}

// SetNillablePreferredAgeMax sets the "preferred_age_max" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePreferredAgeMax(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetPreferredAgeMax(*v)
	}
	return _u
}

// AddPreferredAgeMax adds value to the "preferred_age_max" field.
func (_u *UserUpdateOne) AddPreferredAgeMax(v int) *UserUpdateOne {
	_u.mutation.AddPreferredAgeMax(v)
	return _u
}

// ClearPreferredAgeMax clears the value of the "preferred_age_max" field.
func (_u *UserUpdateOne) ClearPreferredAgeMax() *UserUpdateOne {
	_u.mutation.ClearPreferredAgeMax()
	return _u
}

// SetProfileCompletion sets the "profile_completion" field.
func (_u *UserUpdateOne) SetProfileCompletion(v int) *UserUpdateOne {
	_u.mutation.ResetProfileCompletion()
	_u.mutation.SetProfileCompletion(v)
	return _u
}

// SetNillableProfileCompletion sets the "profile_completion" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableProfileCompletion(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetProfileCompletion(*v)
	}
	return _u
}

// AddProfileCompletion adds value to the "profile_completion" field.
func (_u *UserUpdateOne) AddProfileCompletion(v int) *UserUpdateOne {
	_u.mutation.AddProfileCompletion(v)
	return _u
}

// ClearProfileCompletion clears the value of the "profile_completion" field.
func (_u *UserUpdateOne) ClearProfileCompletion() *UserUpdateOne {
	_u.mutation.ClearProfileCompletion()
	return _u
}

// SetGender sets the "gender" field.
func (_u *UserUpdateOne) SetGender(v user.Gender) *UserUpdateOne {
	_u.mutation.SetGender(v)
	return _u
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableGender(v *user.Gender) *UserUpdateOne {
	if v != nil {
		_u.SetGender(*v)
	}
	return _u
}

// SetPreferredGender sets the "preferred_gender" field.
func (_u *UserUpdateOne) SetPreferredGender(v user.PreferredGender) *UserUpdateOne {
	_u.mutation.SetPreferredGender(v)
	return _u
}

// SetNillablePreferredGender sets the "preferred_gender" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePreferredGender(v *user.PreferredGender) *UserUpdateOne {
	if v != nil {
		_u.SetPreferredGender(*v)
	}
	return _u
}

// SetCoordinates sets the "coordinates" field.
func (_u *UserUpdateOne) SetCoordinates(v *schema.Point) *UserUpdateOne {
	_u.mutation.SetCoordinates(v)
	return _u
}

// ClearCoordinates clears the value of the "coordinates" field.
func (_u *UserUpdateOne) ClearCoordinates() *UserUpdateOne {
	_u.mutation.ClearCoordinates()
	return _u
}

// SetLookingFor sets the "looking_for" field.
func (_u *UserUpdateOne) SetLookingFor(v []string) *UserUpdateOne {
	_u.mutation.SetLookingFor(v)
	return _u
}

// AppendLookingFor appends value to the "looking_for" field.
func (_u *UserUpdateOne) AppendLookingFor(v []string) *UserUpdateOne {
	_u.mutation.AppendLookingFor(v)
	return _u
}

// ClearLookingFor clears the value of the "looking_for" field.
func (_u *UserUpdateOne) ClearLookingFor() *UserUpdateOne {
	_u.mutation.ClearLookingFor()
	return _u
}

// SetInterests sets the "interests" field.
func (_u *UserUpdateOne) SetInterests(v []string) *UserUpdateOne {
	_u.mutation.SetInterests(v)
	return _u
}

// AppendInterests appends value to the "interests" field.
func (_u *UserUpdateOne) AppendInterests(v []string) *UserUpdateOne {
	_u.mutation.AppendInterests(v)
	return _u
}

// ClearInterests clears the value of the "interests" field.
func (_u *UserUpdateOne) ClearInterests() *UserUpdateOne {
	_u.mutation.ClearInterests()
	return _u
}

// SetMusicPreferences sets the "music_preferences" field.
func (_u *UserUpdateOne) SetMusicPreferences(v []string) *UserUpdateOne {
	_u.mutation.SetMusicPreferences(v)
	return _u
}

// AppendMusicPreferences appends value to the "music_preferences" field.
func (_u *UserUpdateOne) AppendMusicPreferences(v []string) *UserUpdateOne {
	_u.mutation.AppendMusicPreferences(v)
	return _u
}

// ClearMusicPreferences clears the value of the "music_preferences" field.
func (_u *UserUpdateOne) ClearMusicPreferences() *UserUpdateOne {
	_u.mutation.ClearMusicPreferences()
	return _u
}

// SetFoodPreferences sets the "food_preferences" field.
func (_u *UserUpdateOne) SetFoodPreferences(v []string) *UserUpdateOne {
	_u.mutation.SetFoodPreferences(v)
	return _u
}

// AppendFoodPreferences appends value to the "food_preferences" field.
func (_u *UserUpdateOne) AppendFoodPreferences(v []string) *UserUpdateOne {
	_u.mutation.AppendFoodPreferences(v)
	return _u
}

// ClearFoodPreferences clears the value of the "food_preferences" field.
func (_u *UserUpdateOne) ClearFoodPreferences() *UserUpdateOne {
	_u.mutation.ClearFoodPreferences()
	return _u
}

// SetCommunicationStyle sets the "communication_style" field.
func (_u *UserUpdateOne) SetCommunicationStyle(v string) *UserUpdateOne {
	_u.mutation.SetCommunicationStyle(v)
	return _u
}

// SetNillableCommunicationStyle sets the "communication_style" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableCommunicationStyle(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetCommunicationStyle(*v)
	}
	return _u
}

// ClearCommunicationStyle clears the value of the "communication_style" field.
func (_u *UserUpdateOne) ClearCommunicationStyle() *UserUpdateOne {
	_u.mutation.ClearCommunicationStyle()
	return _u
}

// SetPrompts sets the "prompts" field.
func (_u *UserUpdateOne) SetPrompts(v []schema.Prompt) *UserUpdateOne {
	_u.mutation.SetPrompts(v)
	return _u
}

// AppendPrompts appends value to the "prompts" field.
func (_u *UserUpdateOne) AppendPrompts(v []schema.Prompt) *UserUpdateOne {
	_u.mutation.AppendPrompts(v)
	return _u
}

// ClearPrompts clears the value of the "prompts" field.
func (_u *UserUpdateOne) ClearPrompts() *UserUpdateOne {
	_u.mutation.ClearPrompts()
	return _u
}

// AddPhotoIDs adds the "photos" edge to the UserPhoto entity by IDs.
func (_u *UserUpdateOne) AddPhotoIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.AddPhotoIDs(ids...)
	return _u
}

// AddPhotos adds the "photos" edges to the UserPhoto entity.
func (_u *UserUpdateOne) AddPhotos(v ...*UserPhoto) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPhotoIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearPhotos clears all "photos" edges to the UserPhoto entity.
func (_u *UserUpdateOne) ClearPhotos() *UserUpdateOne {
	_u.mutation.ClearPhotos()
	return _u
}

// RemovePhotoIDs removes the "photos" edge to UserPhoto entities by IDs.
func (_u *UserUpdateOne) RemovePhotoIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.RemovePhotoIDs(ids...)
	return _u
}

// RemovePhotos removes "photos" edges to UserPhoto entities.
func (_u *UserUpdateOne) RemovePhotos(v ...*UserPhoto) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePhotoIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdateOne) check() error {
	if v, ok := _u.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "User.password_hash": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Age(); ok {
		if err := user.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "User.age": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PreferredAgeMin(); ok {
		if err := user.PreferredAgeMinValidator(v); err != nil {
			return &ValidationError{Name: "preferred_age_min", err: fmt.Errorf(`ent: validator failed for field "User.preferred_age_min": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PreferredAgeMax(); ok {
		if err := user.PreferredAgeMaxValidator(v); err != nil {
			return &ValidationError{Name: "preferred_age_max", err: fmt.Errorf(`ent: validator failed for field "User.preferred_age_max": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProfileCompletion(); ok {
		if err := user.ProfileCompletionValidator(v); err != nil {
			return &ValidationError{Name: "profile_completion", err: fmt.Errorf(`ent: validator failed for field "User.profile_completion": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "User.gender": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PreferredGender(); ok {
		if err := user.PreferredGenderValidator(v); err != nil {
			return &ValidationError{Name: "preferred_gender", err: fmt.Errorf(`ent: validator failed for field "User.preferred_gender": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAge(); ok {
		_spec.AddField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := _u.mutation.PreferredAgeMin(); ok {
		_spec.SetField(user.FieldPreferredAgeMin, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPreferredAgeMin(); ok {
		_spec.AddField(user.FieldPreferredAgeMin, field.TypeInt, value)
	}
	if _u.mutation.PreferredAgeMinCleared() {
		_spec.ClearField(user.FieldPreferredAgeMin, field.TypeInt)
	}
	if value, ok := _u.mutation.PreferredAgeMax(); ok {
		_spec.SetField(user.FieldPreferredAgeMax, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPreferredAgeMax(); ok {
		_spec.AddField(user.FieldPreferredAgeMax, field.TypeInt, value)
	}
	if _u.mutation.PreferredAgeMaxCleared() {
		_spec.ClearField(user.FieldPreferredAgeMax, field.TypeInt)
	}
	if value, ok := _u.mutation.ProfileCompletion(); ok {
		_spec.SetField(user.FieldProfileCompletion, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedProfileCompletion(); ok {
		_spec.AddField(user.FieldProfileCompletion, field.TypeInt, value)
	}
	if _u.mutation.ProfileCompletionCleared() {
		_spec.ClearField(user.FieldProfileCompletion, field.TypeInt)
	}
	if value, ok := _u.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.PreferredGender(); ok {
		_spec.SetField(user.FieldPreferredGender, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Coordinates(); ok {
		_spec.SetField(user.FieldCoordinates, field.TypeOther, value)
	}
	if _u.mutation.CoordinatesCleared() {
		_spec.ClearField(user.FieldCoordinates, field.TypeOther)
	}
	if value, ok := _u.mutation.LookingFor(); ok {
		_spec.SetField(user.FieldLookingFor, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedLookingFor(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldLookingFor, value)
		})
	}
	if _u.mutation.LookingForCleared() {
		_spec.ClearField(user.FieldLookingFor, field.TypeJSON)
	}
	if value, ok := _u.mutation.Interests(); ok {
		_spec.SetField(user.FieldInterests, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedInterests(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldInterests, value)
		})
	}
	if _u.mutation.InterestsCleared() {
		_spec.ClearField(user.FieldInterests, field.TypeJSON)
	}
	if value, ok := _u.mutation.MusicPreferences(); ok {
		_spec.SetField(user.FieldMusicPreferences, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMusicPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldMusicPreferences, value)
		})
	}
	if _u.mutation.MusicPreferencesCleared() {
		_spec.ClearField(user.FieldMusicPreferences, field.TypeJSON)
	}
	if value, ok := _u.mutation.FoodPreferences(); ok {
		_spec.SetField(user.FieldFoodPreferences, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedFoodPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldFoodPreferences, value)
		})
	}
	if _u.mutation.FoodPreferencesCleared() {
		_spec.ClearField(user.FieldFoodPreferences, field.TypeJSON)
	}
	if value, ok := _u.mutation.CommunicationStyle(); ok {
		_spec.SetField(user.FieldCommunicationStyle, field.TypeString, value)
	}
	if _u.mutation.CommunicationStyleCleared() {
		_spec.ClearField(user.FieldCommunicationStyle, field.TypeString)
	}
	if value, ok := _u.mutation.Prompts(); ok {
		_spec.SetField(user.FieldPrompts, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedPrompts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldPrompts, value)
		})
	}
	if _u.mutation.PromptsCleared() {
		_spec.ClearField(user.FieldPrompts, field.TypeJSON)
	}
	if _u.mutation.PhotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PhotosTable,
			Columns: []string{user.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userphoto.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPhotosIDs(); len(nodes) > 0 && !_u.mutation.PhotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PhotosTable,
			Columns: []string{user.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userphoto.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PhotosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PhotosTable,
			Columns: []string{user.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userphoto.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
