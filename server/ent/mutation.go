// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"match-me/ent/predicate"
	"match-me/ent/user"
	"match-me/ent/userphoto"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUser      = "User"
	TypeUserPhoto = "UserPhoto"
)

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	email                   *string
	password_hash           *string
	first_name              *string
	username                *string
	created_at              *time.Time
	updated_at              *time.Time
	is_online               *bool
	age                     *int
	addage                  *int
	gender                  *string
	looking_for             *[]string
	appendlooking_for       []string
	interests               *[]string
	appendinterests         []string
	music_preferences       *[]string
	appendmusic_preferences []string
	food_preferences        *[]string
	appendfood_preferences  []string
	communication_style     *string
	prompts                 *[]map[string]string
	appendprompts           []map[string]string
	clearedFields           map[string]struct{}
	photos                  map[uuid.UUID]struct{}
	removedphotos           map[uuid.UUID]struct{}
	clearedphotos           bool
	done                    bool
	oldValue                func(context.Context) (*User, error)
	predicates              []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPasswordHash sets the "password_hash" field.
func (m *UserMutation) SetPasswordHash(s string) {
	m.password_hash = &s
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *UserMutation) PasswordHash() (r string, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *UserMutation) ResetPasswordHash() {
	m.password_hash = nil
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetIsOnline sets the "is_online" field.
func (m *UserMutation) SetIsOnline(b bool) {
	m.is_online = &b
}

// IsOnline returns the value of the "is_online" field in the mutation.
func (m *UserMutation) IsOnline() (r bool, exists bool) {
	v := m.is_online
	if v == nil {
		return
	}
	return *v, true
}

// OldIsOnline returns the old "is_online" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsOnline(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsOnline is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsOnline requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsOnline: %w", err)
	}
	return oldValue.IsOnline, nil
}

// ResetIsOnline resets all changes to the "is_online" field.
func (m *UserMutation) ResetIsOnline() {
	m.is_online = nil
}

// SetAge sets the "age" field.
func (m *UserMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *UserMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *UserMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *UserMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *UserMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetGender sets the "gender" field.
func (m *UserMutation) SetGender(s string) {
	m.gender = &s
}

// Gender returns the value of the "gender" field in the mutation.
func (m *UserMutation) Gender() (r string, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *UserMutation) ResetGender() {
	m.gender = nil
}

// SetLookingFor sets the "looking_for" field.
func (m *UserMutation) SetLookingFor(s []string) {
	m.looking_for = &s
	m.appendlooking_for = nil
}

// LookingFor returns the value of the "looking_for" field in the mutation.
func (m *UserMutation) LookingFor() (r []string, exists bool) {
	v := m.looking_for
	if v == nil {
		return
	}
	return *v, true
}

// OldLookingFor returns the old "looking_for" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLookingFor(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLookingFor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLookingFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLookingFor: %w", err)
	}
	return oldValue.LookingFor, nil
}

// AppendLookingFor adds s to the "looking_for" field.
func (m *UserMutation) AppendLookingFor(s []string) {
	m.appendlooking_for = append(m.appendlooking_for, s...)
}

// AppendedLookingFor returns the list of values that were appended to the "looking_for" field in this mutation.
func (m *UserMutation) AppendedLookingFor() ([]string, bool) {
	if len(m.appendlooking_for) == 0 {
		return nil, false
	}
	return m.appendlooking_for, true
}

// ClearLookingFor clears the value of the "looking_for" field.
func (m *UserMutation) ClearLookingFor() {
	m.looking_for = nil
	m.appendlooking_for = nil
	m.clearedFields[user.FieldLookingFor] = struct{}{}
}

// LookingForCleared returns if the "looking_for" field was cleared in this mutation.
func (m *UserMutation) LookingForCleared() bool {
	_, ok := m.clearedFields[user.FieldLookingFor]
	return ok
}

// ResetLookingFor resets all changes to the "looking_for" field.
func (m *UserMutation) ResetLookingFor() {
	m.looking_for = nil
	m.appendlooking_for = nil
	delete(m.clearedFields, user.FieldLookingFor)
}

// SetInterests sets the "interests" field.
func (m *UserMutation) SetInterests(s []string) {
	m.interests = &s
	m.appendinterests = nil
}

// Interests returns the value of the "interests" field in the mutation.
func (m *UserMutation) Interests() (r []string, exists bool) {
	v := m.interests
	if v == nil {
		return
	}
	return *v, true
}

// OldInterests returns the old "interests" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldInterests(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInterests is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInterests requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInterests: %w", err)
	}
	return oldValue.Interests, nil
}

// AppendInterests adds s to the "interests" field.
func (m *UserMutation) AppendInterests(s []string) {
	m.appendinterests = append(m.appendinterests, s...)
}

// AppendedInterests returns the list of values that were appended to the "interests" field in this mutation.
func (m *UserMutation) AppendedInterests() ([]string, bool) {
	if len(m.appendinterests) == 0 {
		return nil, false
	}
	return m.appendinterests, true
}

// ClearInterests clears the value of the "interests" field.
func (m *UserMutation) ClearInterests() {
	m.interests = nil
	m.appendinterests = nil
	m.clearedFields[user.FieldInterests] = struct{}{}
}

// InterestsCleared returns if the "interests" field was cleared in this mutation.
func (m *UserMutation) InterestsCleared() bool {
	_, ok := m.clearedFields[user.FieldInterests]
	return ok
}

// ResetInterests resets all changes to the "interests" field.
func (m *UserMutation) ResetInterests() {
	m.interests = nil
	m.appendinterests = nil
	delete(m.clearedFields, user.FieldInterests)
}

// SetMusicPreferences sets the "music_preferences" field.
func (m *UserMutation) SetMusicPreferences(s []string) {
	m.music_preferences = &s
	m.appendmusic_preferences = nil
}

// MusicPreferences returns the value of the "music_preferences" field in the mutation.
func (m *UserMutation) MusicPreferences() (r []string, exists bool) {
	v := m.music_preferences
	if v == nil {
		return
	}
	return *v, true
}

// OldMusicPreferences returns the old "music_preferences" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMusicPreferences(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMusicPreferences is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMusicPreferences requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMusicPreferences: %w", err)
	}
	return oldValue.MusicPreferences, nil
}

// AppendMusicPreferences adds s to the "music_preferences" field.
func (m *UserMutation) AppendMusicPreferences(s []string) {
	m.appendmusic_preferences = append(m.appendmusic_preferences, s...)
}

// AppendedMusicPreferences returns the list of values that were appended to the "music_preferences" field in this mutation.
func (m *UserMutation) AppendedMusicPreferences() ([]string, bool) {
	if len(m.appendmusic_preferences) == 0 {
		return nil, false
	}
	return m.appendmusic_preferences, true
}

// ClearMusicPreferences clears the value of the "music_preferences" field.
func (m *UserMutation) ClearMusicPreferences() {
	m.music_preferences = nil
	m.appendmusic_preferences = nil
	m.clearedFields[user.FieldMusicPreferences] = struct{}{}
}

// MusicPreferencesCleared returns if the "music_preferences" field was cleared in this mutation.
func (m *UserMutation) MusicPreferencesCleared() bool {
	_, ok := m.clearedFields[user.FieldMusicPreferences]
	return ok
}

// ResetMusicPreferences resets all changes to the "music_preferences" field.
func (m *UserMutation) ResetMusicPreferences() {
	m.music_preferences = nil
	m.appendmusic_preferences = nil
	delete(m.clearedFields, user.FieldMusicPreferences)
}

// SetFoodPreferences sets the "food_preferences" field.
func (m *UserMutation) SetFoodPreferences(s []string) {
	m.food_preferences = &s
	m.appendfood_preferences = nil
}

// FoodPreferences returns the value of the "food_preferences" field in the mutation.
func (m *UserMutation) FoodPreferences() (r []string, exists bool) {
	v := m.food_preferences
	if v == nil {
		return
	}
	return *v, true
}

// OldFoodPreferences returns the old "food_preferences" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFoodPreferences(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFoodPreferences is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFoodPreferences requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFoodPreferences: %w", err)
	}
	return oldValue.FoodPreferences, nil
}

// AppendFoodPreferences adds s to the "food_preferences" field.
func (m *UserMutation) AppendFoodPreferences(s []string) {
	m.appendfood_preferences = append(m.appendfood_preferences, s...)
}

// AppendedFoodPreferences returns the list of values that were appended to the "food_preferences" field in this mutation.
func (m *UserMutation) AppendedFoodPreferences() ([]string, bool) {
	if len(m.appendfood_preferences) == 0 {
		return nil, false
	}
	return m.appendfood_preferences, true
}

// ClearFoodPreferences clears the value of the "food_preferences" field.
func (m *UserMutation) ClearFoodPreferences() {
	m.food_preferences = nil
	m.appendfood_preferences = nil
	m.clearedFields[user.FieldFoodPreferences] = struct{}{}
}

// FoodPreferencesCleared returns if the "food_preferences" field was cleared in this mutation.
func (m *UserMutation) FoodPreferencesCleared() bool {
	_, ok := m.clearedFields[user.FieldFoodPreferences]
	return ok
}

// ResetFoodPreferences resets all changes to the "food_preferences" field.
func (m *UserMutation) ResetFoodPreferences() {
	m.food_preferences = nil
	m.appendfood_preferences = nil
	delete(m.clearedFields, user.FieldFoodPreferences)
}

// SetCommunicationStyle sets the "communication_style" field.
func (m *UserMutation) SetCommunicationStyle(s string) {
	m.communication_style = &s
}

// CommunicationStyle returns the value of the "communication_style" field in the mutation.
func (m *UserMutation) CommunicationStyle() (r string, exists bool) {
	v := m.communication_style
	if v == nil {
		return
	}
	return *v, true
}

// OldCommunicationStyle returns the old "communication_style" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCommunicationStyle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommunicationStyle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommunicationStyle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommunicationStyle: %w", err)
	}
	return oldValue.CommunicationStyle, nil
}

// ClearCommunicationStyle clears the value of the "communication_style" field.
func (m *UserMutation) ClearCommunicationStyle() {
	m.communication_style = nil
	m.clearedFields[user.FieldCommunicationStyle] = struct{}{}
}

// CommunicationStyleCleared returns if the "communication_style" field was cleared in this mutation.
func (m *UserMutation) CommunicationStyleCleared() bool {
	_, ok := m.clearedFields[user.FieldCommunicationStyle]
	return ok
}

// ResetCommunicationStyle resets all changes to the "communication_style" field.
func (m *UserMutation) ResetCommunicationStyle() {
	m.communication_style = nil
	delete(m.clearedFields, user.FieldCommunicationStyle)
}

// SetPrompts sets the "prompts" field.
func (m *UserMutation) SetPrompts(value []map[string]string) {
	m.prompts = &value
	m.appendprompts = nil
}

// Prompts returns the value of the "prompts" field in the mutation.
func (m *UserMutation) Prompts() (r []map[string]string, exists bool) {
	v := m.prompts
	if v == nil {
		return
	}
	return *v, true
}

// OldPrompts returns the old "prompts" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPrompts(ctx context.Context) (v []map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrompts is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrompts requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrompts: %w", err)
	}
	return oldValue.Prompts, nil
}

// AppendPrompts adds value to the "prompts" field.
func (m *UserMutation) AppendPrompts(value []map[string]string) {
	m.appendprompts = append(m.appendprompts, value...)
}

// AppendedPrompts returns the list of values that were appended to the "prompts" field in this mutation.
func (m *UserMutation) AppendedPrompts() ([]map[string]string, bool) {
	if len(m.appendprompts) == 0 {
		return nil, false
	}
	return m.appendprompts, true
}

// ClearPrompts clears the value of the "prompts" field.
func (m *UserMutation) ClearPrompts() {
	m.prompts = nil
	m.appendprompts = nil
	m.clearedFields[user.FieldPrompts] = struct{}{}
}

// PromptsCleared returns if the "prompts" field was cleared in this mutation.
func (m *UserMutation) PromptsCleared() bool {
	_, ok := m.clearedFields[user.FieldPrompts]
	return ok
}

// ResetPrompts resets all changes to the "prompts" field.
func (m *UserMutation) ResetPrompts() {
	m.prompts = nil
	m.appendprompts = nil
	delete(m.clearedFields, user.FieldPrompts)
}

// AddPhotoIDs adds the "photos" edge to the UserPhoto entity by ids.
func (m *UserMutation) AddPhotoIDs(ids ...uuid.UUID) {
	if m.photos == nil {
		m.photos = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.photos[ids[i]] = struct{}{}
	}
}

// ClearPhotos clears the "photos" edge to the UserPhoto entity.
func (m *UserMutation) ClearPhotos() {
	m.clearedphotos = true
}

// PhotosCleared reports if the "photos" edge to the UserPhoto entity was cleared.
func (m *UserMutation) PhotosCleared() bool {
	return m.clearedphotos
}

// RemovePhotoIDs removes the "photos" edge to the UserPhoto entity by IDs.
func (m *UserMutation) RemovePhotoIDs(ids ...uuid.UUID) {
	if m.removedphotos == nil {
		m.removedphotos = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.photos, ids[i])
		m.removedphotos[ids[i]] = struct{}{}
	}
}

// RemovedPhotos returns the removed IDs of the "photos" edge to the UserPhoto entity.
func (m *UserMutation) RemovedPhotosIDs() (ids []uuid.UUID) {
	for id := range m.removedphotos {
		ids = append(ids, id)
	}
	return
}

// PhotosIDs returns the "photos" edge IDs in the mutation.
func (m *UserMutation) PhotosIDs() (ids []uuid.UUID) {
	for id := range m.photos {
		ids = append(ids, id)
	}
	return
}

// ResetPhotos resets all changes to the "photos" edge.
func (m *UserMutation) ResetPhotos() {
	m.photos = nil
	m.clearedphotos = false
	m.removedphotos = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password_hash != nil {
		fields = append(fields, user.FieldPasswordHash)
	}
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.is_online != nil {
		fields = append(fields, user.FieldIsOnline)
	}
	if m.age != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.gender != nil {
		fields = append(fields, user.FieldGender)
	}
	if m.looking_for != nil {
		fields = append(fields, user.FieldLookingFor)
	}
	if m.interests != nil {
		fields = append(fields, user.FieldInterests)
	}
	if m.music_preferences != nil {
		fields = append(fields, user.FieldMusicPreferences)
	}
	if m.food_preferences != nil {
		fields = append(fields, user.FieldFoodPreferences)
	}
	if m.communication_style != nil {
		fields = append(fields, user.FieldCommunicationStyle)
	}
	if m.prompts != nil {
		fields = append(fields, user.FieldPrompts)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldPasswordHash:
		return m.PasswordHash()
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldUsername:
		return m.Username()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldIsOnline:
		return m.IsOnline()
	case user.FieldAge:
		return m.Age()
	case user.FieldGender:
		return m.Gender()
	case user.FieldLookingFor:
		return m.LookingFor()
	case user.FieldInterests:
		return m.Interests()
	case user.FieldMusicPreferences:
		return m.MusicPreferences()
	case user.FieldFoodPreferences:
		return m.FoodPreferences()
	case user.FieldCommunicationStyle:
		return m.CommunicationStyle()
	case user.FieldPrompts:
		return m.Prompts()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldIsOnline:
		return m.OldIsOnline(ctx)
	case user.FieldAge:
		return m.OldAge(ctx)
	case user.FieldGender:
		return m.OldGender(ctx)
	case user.FieldLookingFor:
		return m.OldLookingFor(ctx)
	case user.FieldInterests:
		return m.OldInterests(ctx)
	case user.FieldMusicPreferences:
		return m.OldMusicPreferences(ctx)
	case user.FieldFoodPreferences:
		return m.OldFoodPreferences(ctx)
	case user.FieldCommunicationStyle:
		return m.OldCommunicationStyle(ctx)
	case user.FieldPrompts:
		return m.OldPrompts(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPasswordHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldIsOnline:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsOnline(v)
		return nil
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case user.FieldGender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case user.FieldLookingFor:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLookingFor(v)
		return nil
	case user.FieldInterests:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInterests(v)
		return nil
	case user.FieldMusicPreferences:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMusicPreferences(v)
		return nil
	case user.FieldFoodPreferences:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFoodPreferences(v)
		return nil
	case user.FieldCommunicationStyle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommunicationStyle(v)
		return nil
	case user.FieldPrompts:
		v, ok := value.([]map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrompts(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, user.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldLookingFor) {
		fields = append(fields, user.FieldLookingFor)
	}
	if m.FieldCleared(user.FieldInterests) {
		fields = append(fields, user.FieldInterests)
	}
	if m.FieldCleared(user.FieldMusicPreferences) {
		fields = append(fields, user.FieldMusicPreferences)
	}
	if m.FieldCleared(user.FieldFoodPreferences) {
		fields = append(fields, user.FieldFoodPreferences)
	}
	if m.FieldCleared(user.FieldCommunicationStyle) {
		fields = append(fields, user.FieldCommunicationStyle)
	}
	if m.FieldCleared(user.FieldPrompts) {
		fields = append(fields, user.FieldPrompts)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldLookingFor:
		m.ClearLookingFor()
		return nil
	case user.FieldInterests:
		m.ClearInterests()
		return nil
	case user.FieldMusicPreferences:
		m.ClearMusicPreferences()
		return nil
	case user.FieldFoodPreferences:
		m.ClearFoodPreferences()
		return nil
	case user.FieldCommunicationStyle:
		m.ClearCommunicationStyle()
		return nil
	case user.FieldPrompts:
		m.ClearPrompts()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldIsOnline:
		m.ResetIsOnline()
		return nil
	case user.FieldAge:
		m.ResetAge()
		return nil
	case user.FieldGender:
		m.ResetGender()
		return nil
	case user.FieldLookingFor:
		m.ResetLookingFor()
		return nil
	case user.FieldInterests:
		m.ResetInterests()
		return nil
	case user.FieldMusicPreferences:
		m.ResetMusicPreferences()
		return nil
	case user.FieldFoodPreferences:
		m.ResetFoodPreferences()
		return nil
	case user.FieldCommunicationStyle:
		m.ResetCommunicationStyle()
		return nil
	case user.FieldPrompts:
		m.ResetPrompts()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.photos != nil {
		edges = append(edges, user.EdgePhotos)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePhotos:
		ids := make([]ent.Value, 0, len(m.photos))
		for id := range m.photos {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedphotos != nil {
		edges = append(edges, user.EdgePhotos)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePhotos:
		ids := make([]ent.Value, 0, len(m.removedphotos))
		for id := range m.removedphotos {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedphotos {
		edges = append(edges, user.EdgePhotos)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgePhotos:
		return m.clearedphotos
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgePhotos:
		m.ResetPhotos()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserPhotoMutation represents an operation that mutates the UserPhoto nodes in the graph.
type UserPhotoMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	photo_url     *string
	_order        *int
	add_order     *int
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*UserPhoto, error)
	predicates    []predicate.UserPhoto
}

var _ ent.Mutation = (*UserPhotoMutation)(nil)

// userphotoOption allows management of the mutation configuration using functional options.
type userphotoOption func(*UserPhotoMutation)

// newUserPhotoMutation creates new mutation for the UserPhoto entity.
func newUserPhotoMutation(c config, op Op, opts ...userphotoOption) *UserPhotoMutation {
	m := &UserPhotoMutation{
		config:        c,
		op:            op,
		typ:           TypeUserPhoto,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserPhotoID sets the ID field of the mutation.
func withUserPhotoID(id uuid.UUID) userphotoOption {
	return func(m *UserPhotoMutation) {
		var (
			err   error
			once  sync.Once
			value *UserPhoto
		)
		m.oldValue = func(ctx context.Context) (*UserPhoto, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserPhoto.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserPhoto sets the old UserPhoto of the mutation.
func withUserPhoto(node *UserPhoto) userphotoOption {
	return func(m *UserPhotoMutation) {
		m.oldValue = func(context.Context) (*UserPhoto, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserPhotoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserPhotoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserPhoto entities.
func (m *UserPhotoMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserPhotoMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserPhotoMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserPhoto.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPhotoURL sets the "photo_url" field.
func (m *UserPhotoMutation) SetPhotoURL(s string) {
	m.photo_url = &s
}

// PhotoURL returns the value of the "photo_url" field in the mutation.
func (m *UserPhotoMutation) PhotoURL() (r string, exists bool) {
	v := m.photo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL returns the old "photo_url" field's value of the UserPhoto entity.
// If the UserPhoto object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPhotoMutation) OldPhotoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL: %w", err)
	}
	return oldValue.PhotoURL, nil
}

// ResetPhotoURL resets all changes to the "photo_url" field.
func (m *UserPhotoMutation) ResetPhotoURL() {
	m.photo_url = nil
}

// SetOrder sets the "order" field.
func (m *UserPhotoMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *UserPhotoMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the UserPhoto entity.
// If the UserPhoto object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPhotoMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *UserPhotoMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *UserPhotoMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *UserPhotoMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetUserID sets the "user_id" field.
func (m *UserPhotoMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserPhotoMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserPhoto entity.
// If the UserPhoto object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPhotoMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserPhotoMutation) ResetUserID() {
	m.user = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserPhotoMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[userphoto.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserPhotoMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserPhotoMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserPhotoMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the UserPhotoMutation builder.
func (m *UserPhotoMutation) Where(ps ...predicate.UserPhoto) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserPhotoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserPhotoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserPhoto, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserPhotoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserPhotoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserPhoto).
func (m *UserPhotoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserPhotoMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.photo_url != nil {
		fields = append(fields, userphoto.FieldPhotoURL)
	}
	if m._order != nil {
		fields = append(fields, userphoto.FieldOrder)
	}
	if m.user != nil {
		fields = append(fields, userphoto.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserPhotoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userphoto.FieldPhotoURL:
		return m.PhotoURL()
	case userphoto.FieldOrder:
		return m.Order()
	case userphoto.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserPhotoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userphoto.FieldPhotoURL:
		return m.OldPhotoURL(ctx)
	case userphoto.FieldOrder:
		return m.OldOrder(ctx)
	case userphoto.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown UserPhoto field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPhotoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userphoto.FieldPhotoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL(v)
		return nil
	case userphoto.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case userphoto.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown UserPhoto field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserPhotoMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, userphoto.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserPhotoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userphoto.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPhotoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userphoto.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown UserPhoto numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserPhotoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserPhotoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserPhotoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserPhoto nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserPhotoMutation) ResetField(name string) error {
	switch name {
	case userphoto.FieldPhotoURL:
		m.ResetPhotoURL()
		return nil
	case userphoto.FieldOrder:
		m.ResetOrder()
		return nil
	case userphoto.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown UserPhoto field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserPhotoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, userphoto.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserPhotoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userphoto.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserPhotoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserPhotoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserPhotoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, userphoto.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserPhotoMutation) EdgeCleared(name string) bool {
	switch name {
	case userphoto.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserPhotoMutation) ClearEdge(name string) error {
	switch name {
	case userphoto.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown UserPhoto unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserPhotoMutation) ResetEdge(name string) error {
	switch name {
	case userphoto.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown UserPhoto edge %s", name)
}
