// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"match-me/ent/predicate"
	"match-me/ent/user"
	"match-me/ent/userinteraction"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserInteractionUpdate is the builder for updating UserInteraction entities.
type UserInteractionUpdate struct {
	config
	hooks    []Hook
	mutation *UserInteractionMutation
}

// Where appends a list predicates to the UserInteractionUpdate builder.
func (_u *UserInteractionUpdate) Where(ps ...predicate.UserInteraction) *UserInteractionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *UserInteractionUpdate) SetUserID(v uuid.UUID) *UserInteractionUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *UserInteractionUpdate) SetNillableUserID(v *uuid.UUID) *UserInteractionUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetTargetUserID sets the "target_user_id" field.
func (_u *UserInteractionUpdate) SetTargetUserID(v uuid.UUID) *UserInteractionUpdate {
	_u.mutation.SetTargetUserID(v)
	return _u
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (_u *UserInteractionUpdate) SetNillableTargetUserID(v *uuid.UUID) *UserInteractionUpdate {
	if v != nil {
		_u.SetTargetUserID(*v)
	}
	return _u
}

// SetInteractionType sets the "interaction_type" field.
func (_u *UserInteractionUpdate) SetInteractionType(v userinteraction.InteractionType) *UserInteractionUpdate {
	_u.mutation.SetInteractionType(v)
	return _u
}

// SetNillableInteractionType sets the "interaction_type" field if the given value is not nil.
func (_u *UserInteractionUpdate) SetNillableInteractionType(v *userinteraction.InteractionType) *UserInteractionUpdate {
	if v != nil {
		_u.SetInteractionType(*v)
	}
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *UserInteractionUpdate) SetExpiresAt(v time.Time) *UserInteractionUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *UserInteractionUpdate) SetNillableExpiresAt(v *time.Time) *UserInteractionUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *UserInteractionUpdate) ClearExpiresAt() *UserInteractionUpdate {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *UserInteractionUpdate) SetMetadata(v map[string]interface{}) *UserInteractionUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *UserInteractionUpdate) ClearMetadata() *UserInteractionUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserInteractionUpdate) SetUser(v *User) *UserInteractionUpdate {
	return _u.SetUserID(v.ID)
}

// SetTargetUser sets the "target_user" edge to the User entity.
func (_u *UserInteractionUpdate) SetTargetUser(v *User) *UserInteractionUpdate {
	return _u.SetTargetUserID(v.ID)
}

// Mutation returns the UserInteractionMutation object of the builder.
func (_u *UserInteractionUpdate) Mutation() *UserInteractionMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserInteractionUpdate) ClearUser() *UserInteractionUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearTargetUser clears the "target_user" edge to the User entity.
func (_u *UserInteractionUpdate) ClearTargetUser() *UserInteractionUpdate {
	_u.mutation.ClearTargetUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserInteractionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserInteractionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserInteractionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserInteractionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserInteractionUpdate) check() error {
	if v, ok := _u.mutation.InteractionType(); ok {
		if err := userinteraction.InteractionTypeValidator(v); err != nil {
			return &ValidationError{Name: "interaction_type", err: fmt.Errorf(`ent: validator failed for field "UserInteraction.interaction_type": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserInteraction.user"`)
	}
	if _u.mutation.TargetUserCleared() && len(_u.mutation.TargetUserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserInteraction.target_user"`)
	}
	return nil
}

func (_u *UserInteractionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userinteraction.Table, userinteraction.Columns, sqlgraph.NewFieldSpec(userinteraction.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InteractionType(); ok {
		_spec.SetField(userinteraction.FieldInteractionType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(userinteraction.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(userinteraction.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(userinteraction.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(userinteraction.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userinteraction.UserTable,
			Columns: []string{userinteraction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userinteraction.UserTable,
			Columns: []string{userinteraction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userinteraction.TargetUserTable,
			Columns: []string{userinteraction.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userinteraction.TargetUserTable,
			Columns: []string{userinteraction.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinteraction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserInteractionUpdateOne is the builder for updating a single UserInteraction entity.
type UserInteractionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserInteractionMutation
}

// SetUserID sets the "user_id" field.
func (_u *UserInteractionUpdateOne) SetUserID(v uuid.UUID) *UserInteractionUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *UserInteractionUpdateOne) SetNillableUserID(v *uuid.UUID) *UserInteractionUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetTargetUserID sets the "target_user_id" field.
func (_u *UserInteractionUpdateOne) SetTargetUserID(v uuid.UUID) *UserInteractionUpdateOne {
	_u.mutation.SetTargetUserID(v)
	return _u
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (_u *UserInteractionUpdateOne) SetNillableTargetUserID(v *uuid.UUID) *UserInteractionUpdateOne {
	if v != nil {
		_u.SetTargetUserID(*v)
	}
	return _u
}

// SetInteractionType sets the "interaction_type" field.
func (_u *UserInteractionUpdateOne) SetInteractionType(v userinteraction.InteractionType) *UserInteractionUpdateOne {
	_u.mutation.SetInteractionType(v)
	return _u
}

// SetNillableInteractionType sets the "interaction_type" field if the given value is not nil.
func (_u *UserInteractionUpdateOne) SetNillableInteractionType(v *userinteraction.InteractionType) *UserInteractionUpdateOne {
	if v != nil {
		_u.SetInteractionType(*v)
	}
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *UserInteractionUpdateOne) SetExpiresAt(v time.Time) *UserInteractionUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *UserInteractionUpdateOne) SetNillableExpiresAt(v *time.Time) *UserInteractionUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *UserInteractionUpdateOne) ClearExpiresAt() *UserInteractionUpdateOne {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *UserInteractionUpdateOne) SetMetadata(v map[string]interface{}) *UserInteractionUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *UserInteractionUpdateOne) ClearMetadata() *UserInteractionUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserInteractionUpdateOne) SetUser(v *User) *UserInteractionUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetTargetUser sets the "target_user" edge to the User entity.
func (_u *UserInteractionUpdateOne) SetTargetUser(v *User) *UserInteractionUpdateOne {
	return _u.SetTargetUserID(v.ID)
}

// Mutation returns the UserInteractionMutation object of the builder.
func (_u *UserInteractionUpdateOne) Mutation() *UserInteractionMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserInteractionUpdateOne) ClearUser() *UserInteractionUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearTargetUser clears the "target_user" edge to the User entity.
func (_u *UserInteractionUpdateOne) ClearTargetUser() *UserInteractionUpdateOne {
	_u.mutation.ClearTargetUser()
	return _u
}

// Where appends a list predicates to the UserInteractionUpdate builder.
func (_u *UserInteractionUpdateOne) Where(ps ...predicate.UserInteraction) *UserInteractionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserInteractionUpdateOne) Select(field string, fields ...string) *UserInteractionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UserInteraction entity.
func (_u *UserInteractionUpdateOne) Save(ctx context.Context) (*UserInteraction, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserInteractionUpdateOne) SaveX(ctx context.Context) *UserInteraction {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserInteractionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserInteractionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserInteractionUpdateOne) check() error {
	if v, ok := _u.mutation.InteractionType(); ok {
		if err := userinteraction.InteractionTypeValidator(v); err != nil {
			return &ValidationError{Name: "interaction_type", err: fmt.Errorf(`ent: validator failed for field "UserInteraction.interaction_type": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserInteraction.user"`)
	}
	if _u.mutation.TargetUserCleared() && len(_u.mutation.TargetUserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserInteraction.target_user"`)
	}
	return nil
}

func (_u *UserInteractionUpdateOne) sqlSave(ctx context.Context) (_node *UserInteraction, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userinteraction.Table, userinteraction.Columns, sqlgraph.NewFieldSpec(userinteraction.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserInteraction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userinteraction.FieldID)
		for _, f := range fields {
			if !userinteraction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userinteraction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InteractionType(); ok {
		_spec.SetField(userinteraction.FieldInteractionType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(userinteraction.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(userinteraction.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(userinteraction.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(userinteraction.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userinteraction.UserTable,
			Columns: []string{userinteraction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userinteraction.UserTable,
			Columns: []string{userinteraction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userinteraction.TargetUserTable,
			Columns: []string{userinteraction.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userinteraction.TargetUserTable,
			Columns: []string{userinteraction.TargetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserInteraction{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinteraction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
