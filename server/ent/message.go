// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"match-me/ent/connection"
	"match-me/ent/message"
	"match-me/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ID of the connection this message belongs to
	ConnectionID uuid.UUID `json:"connection_id,omitempty"`
	// ID of the user who sent the message
	SenderID uuid.UUID `json:"sender_id,omitempty"`
	// ID of the user who received the message
	ReceiverID uuid.UUID `json:"receiver_id,omitempty"`
	// Type of message content
	Type message.Type `json:"type,omitempty"`
	// Text content of the message (for text messages)
	Content string `json:"content,omitempty"`
	// URL of the media file (for media messages)
	MediaURL string `json:"media_url,omitempty"`
	// MIME type of the media file (e.g., image/jpeg, video/mp4)
	MediaType string `json:"media_type,omitempty"`
	// Public ID for media storage service (e.g., Cloudinary)
	MediaPublicID string `json:"media_public_id,omitempty"`
	// Whether the message has been read by the receiver
	IsRead bool `json:"is_read,omitempty"`
	// Timestamp when the message was sent
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Timestamp when the message was last updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Timestamp when the message was read by the receiver
	ReadAt time.Time `json:"read_at,omitempty"`
	// Soft delete flag for the message
	IsDeleted bool `json:"is_deleted,omitempty"`
	// Timestamp when the message was deleted
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageQuery when eager-loading is set.
	Edges        MessageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MessageEdges holds the relations/edges for other nodes in the graph.
type MessageEdges struct {
	// Reference to the connection this message belongs to
	Connection *Connection `json:"connection,omitempty"`
	// Reference to the user who sent the message
	Sender *User `json:"sender,omitempty"`
	// Reference to the user who received the message
	Receiver *User `json:"receiver,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ConnectionOrErr returns the Connection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) ConnectionOrErr() (*Connection, error) {
	if e.Connection != nil {
		return e.Connection, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: connection.Label}
	}
	return nil, &NotLoadedError{edge: "connection"}
}

// SenderOrErr returns the Sender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) SenderOrErr() (*User, error) {
	if e.Sender != nil {
		return e.Sender, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "sender"}
}

// ReceiverOrErr returns the Receiver value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) ReceiverOrErr() (*User, error) {
	if e.Receiver != nil {
		return e.Receiver, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "receiver"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldIsRead, message.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case message.FieldType, message.FieldContent, message.FieldMediaURL, message.FieldMediaType, message.FieldMediaPublicID:
			values[i] = new(sql.NullString)
		case message.FieldCreatedAt, message.FieldUpdatedAt, message.FieldReadAt, message.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case message.FieldID, message.FieldConnectionID, message.FieldSenderID, message.FieldReceiverID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (_m *Message) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case message.FieldConnectionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field connection_id", values[i])
			} else if value != nil {
				_m.ConnectionID = *value
			}
		case message.FieldSenderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field sender_id", values[i])
			} else if value != nil {
				_m.SenderID = *value
			}
		case message.FieldReceiverID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_id", values[i])
			} else if value != nil {
				_m.ReceiverID = *value
			}
		case message.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = message.Type(value.String)
			}
		case message.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				_m.Content = value.String
			}
		case message.FieldMediaURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_url", values[i])
			} else if value.Valid {
				_m.MediaURL = value.String
			}
		case message.FieldMediaType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_type", values[i])
			} else if value.Valid {
				_m.MediaType = value.String
			}
		case message.FieldMediaPublicID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_public_id", values[i])
			} else if value.Valid {
				_m.MediaPublicID = value.String
			}
		case message.FieldIsRead:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_read", values[i])
			} else if value.Valid {
				_m.IsRead = value.Bool
			}
		case message.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case message.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case message.FieldReadAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field read_at", values[i])
			} else if value.Valid {
				_m.ReadAt = value.Time
			}
		case message.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				_m.IsDeleted = value.Bool
			}
		case message.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Message.
// This includes values selected through modifiers, order, etc.
func (_m *Message) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryConnection queries the "connection" edge of the Message entity.
func (_m *Message) QueryConnection() *ConnectionQuery {
	return NewMessageClient(_m.config).QueryConnection(_m)
}

// QuerySender queries the "sender" edge of the Message entity.
func (_m *Message) QuerySender() *UserQuery {
	return NewMessageClient(_m.config).QuerySender(_m)
}

// QueryReceiver queries the "receiver" edge of the Message entity.
func (_m *Message) QueryReceiver() *UserQuery {
	return NewMessageClient(_m.config).QueryReceiver(_m)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Message) Update() *MessageUpdateOne {
	return NewMessageClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Message) Unwrap() *Message {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("connection_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ConnectionID))
	builder.WriteString(", ")
	builder.WriteString("sender_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.SenderID))
	builder.WriteString(", ")
	builder.WriteString("receiver_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ReceiverID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(_m.Content)
	builder.WriteString(", ")
	builder.WriteString("media_url=")
	builder.WriteString(_m.MediaURL)
	builder.WriteString(", ")
	builder.WriteString("media_type=")
	builder.WriteString(_m.MediaType)
	builder.WriteString(", ")
	builder.WriteString("media_public_id=")
	builder.WriteString(_m.MediaPublicID)
	builder.WriteString(", ")
	builder.WriteString("is_read=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsRead))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("read_at=")
	builder.WriteString(_m.ReadAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Messages is a parsable slice of Message.
type Messages []*Message
