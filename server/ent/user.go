// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"match-me/ent/schema"
	"match-me/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// PasswordHash holds the value of the "password_hash" field.
	PasswordHash string `json:"-"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// PreferredAgeMin holds the value of the "preferred_age_min" field.
	PreferredAgeMin int `json:"preferred_age_min,omitempty"`
	// PreferredAgeMax holds the value of the "preferred_age_max" field.
	PreferredAgeMax int `json:"preferred_age_max,omitempty"`
	// ProfileCompletion holds the value of the "profile_completion" field.
	ProfileCompletion int `json:"profile_completion,omitempty"`
	// Gender options for user profiles, inclusive of non-binary and opt-out preferences
	Gender user.Gender `json:"gender,omitempty"`
	// Preferred gender options for user matches
	PreferredGender user.PreferredGender `json:"preferred_gender,omitempty"`
	// Coordinates holds the value of the "coordinates" field.
	Coordinates *schema.Point `json:"coordinates,omitempty"`
	// LookingFor holds the value of the "looking_for" field.
	LookingFor []string `json:"looking_for,omitempty"`
	// Interests holds the value of the "interests" field.
	Interests []string `json:"interests,omitempty"`
	// MusicPreferences holds the value of the "music_preferences" field.
	MusicPreferences []string `json:"music_preferences,omitempty"`
	// FoodPreferences holds the value of the "food_preferences" field.
	FoodPreferences []string `json:"food_preferences,omitempty"`
	// CommunicationStyle holds the value of the "communication_style" field.
	CommunicationStyle string `json:"communication_style,omitempty"`
	// Prompts holds the value of the "prompts" field.
	Prompts []schema.Prompt `json:"prompts,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Photos holds the value of the photos edge.
	Photos []*UserPhoto `json:"photos,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PhotosOrErr returns the Photos value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PhotosOrErr() ([]*UserPhoto, error) {
	if e.loadedTypes[0] {
		return e.Photos, nil
	}
	return nil, &NotLoadedError{edge: "photos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldLookingFor, user.FieldInterests, user.FieldMusicPreferences, user.FieldFoodPreferences, user.FieldPrompts:
			values[i] = new([]byte)
		case user.FieldCoordinates:
			values[i] = new(schema.Point)
		case user.FieldAge, user.FieldPreferredAgeMin, user.FieldPreferredAgeMax, user.FieldProfileCompletion:
			values[i] = new(sql.NullInt64)
		case user.FieldEmail, user.FieldPasswordHash, user.FieldFirstName, user.FieldLastName, user.FieldGender, user.FieldPreferredGender, user.FieldCommunicationStyle:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (_m *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				_m.Email = value.String
			}
		case user.FieldPasswordHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value.Valid {
				_m.PasswordHash = value.String
			}
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				_m.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				_m.LastName = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case user.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				_m.Age = int(value.Int64)
			}
		case user.FieldPreferredAgeMin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field preferred_age_min", values[i])
			} else if value.Valid {
				_m.PreferredAgeMin = int(value.Int64)
			}
		case user.FieldPreferredAgeMax:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field preferred_age_max", values[i])
			} else if value.Valid {
				_m.PreferredAgeMax = int(value.Int64)
			}
		case user.FieldProfileCompletion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field profile_completion", values[i])
			} else if value.Valid {
				_m.ProfileCompletion = int(value.Int64)
			}
		case user.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				_m.Gender = user.Gender(value.String)
			}
		case user.FieldPreferredGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field preferred_gender", values[i])
			} else if value.Valid {
				_m.PreferredGender = user.PreferredGender(value.String)
			}
		case user.FieldCoordinates:
			if value, ok := values[i].(*schema.Point); !ok {
				return fmt.Errorf("unexpected type %T for field coordinates", values[i])
			} else if value != nil {
				_m.Coordinates = value
			}
		case user.FieldLookingFor:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field looking_for", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.LookingFor); err != nil {
					return fmt.Errorf("unmarshal field looking_for: %w", err)
				}
			}
		case user.FieldInterests:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field interests", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Interests); err != nil {
					return fmt.Errorf("unmarshal field interests: %w", err)
				}
			}
		case user.FieldMusicPreferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field music_preferences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.MusicPreferences); err != nil {
					return fmt.Errorf("unmarshal field music_preferences: %w", err)
				}
			}
		case user.FieldFoodPreferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field food_preferences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.FoodPreferences); err != nil {
					return fmt.Errorf("unmarshal field food_preferences: %w", err)
				}
			}
		case user.FieldCommunicationStyle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field communication_style", values[i])
			} else if value.Valid {
				_m.CommunicationStyle = value.String
			}
		case user.FieldPrompts:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field prompts", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Prompts); err != nil {
					return fmt.Errorf("unmarshal field prompts: %w", err)
				}
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (_m *User) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPhotos queries the "photos" edge of the User entity.
func (_m *User) QueryPhotos() *UserPhotoQuery {
	return NewUserClient(_m.config).QueryPhotos(_m)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *User) Update() *UserUpdateOne {
	return NewUserClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *User) Unwrap() *User {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("email=")
	builder.WriteString(_m.Email)
	builder.WriteString(", ")
	builder.WriteString("password_hash=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(_m.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(_m.LastName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", _m.Age))
	builder.WriteString(", ")
	builder.WriteString("preferred_age_min=")
	builder.WriteString(fmt.Sprintf("%v", _m.PreferredAgeMin))
	builder.WriteString(", ")
	builder.WriteString("preferred_age_max=")
	builder.WriteString(fmt.Sprintf("%v", _m.PreferredAgeMax))
	builder.WriteString(", ")
	builder.WriteString("profile_completion=")
	builder.WriteString(fmt.Sprintf("%v", _m.ProfileCompletion))
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", _m.Gender))
	builder.WriteString(", ")
	builder.WriteString("preferred_gender=")
	builder.WriteString(fmt.Sprintf("%v", _m.PreferredGender))
	builder.WriteString(", ")
	builder.WriteString("coordinates=")
	builder.WriteString(fmt.Sprintf("%v", _m.Coordinates))
	builder.WriteString(", ")
	builder.WriteString("looking_for=")
	builder.WriteString(fmt.Sprintf("%v", _m.LookingFor))
	builder.WriteString(", ")
	builder.WriteString("interests=")
	builder.WriteString(fmt.Sprintf("%v", _m.Interests))
	builder.WriteString(", ")
	builder.WriteString("music_preferences=")
	builder.WriteString(fmt.Sprintf("%v", _m.MusicPreferences))
	builder.WriteString(", ")
	builder.WriteString("food_preferences=")
	builder.WriteString(fmt.Sprintf("%v", _m.FoodPreferences))
	builder.WriteString(", ")
	builder.WriteString("communication_style=")
	builder.WriteString(_m.CommunicationStyle)
	builder.WriteString(", ")
	builder.WriteString("prompts=")
	builder.WriteString(fmt.Sprintf("%v", _m.Prompts))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
