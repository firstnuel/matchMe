// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"match-me/ent/user"
	"match-me/ent/userinteraction"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// UserInteraction is the model entity for the UserInteraction schema.
type UserInteraction struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ID of the user performing the action
	UserID uuid.UUID `json:"user_id,omitempty"`
	// ID of the user being acted upon
	TargetUserID uuid.UUID `json:"target_user_id,omitempty"`
	// Type of interaction performed
	InteractionType userinteraction.InteractionType `json:"interaction_type,omitempty"`
	// Timestamp when the interaction was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Optional expiration timestamp for the interaction
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// Optional additional context for the interaction
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserInteractionQuery when eager-loading is set.
	Edges        UserInteractionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserInteractionEdges holds the relations/edges for other nodes in the graph.
type UserInteractionEdges struct {
	// Reference to the user who performed the action
	User *User `json:"user,omitempty"`
	// Reference to the user who was acted upon
	TargetUser *User `json:"target_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserInteractionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TargetUserOrErr returns the TargetUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserInteractionEdges) TargetUserOrErr() (*User, error) {
	if e.TargetUser != nil {
		return e.TargetUser, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "target_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserInteraction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userinteraction.FieldMetadata:
			values[i] = new([]byte)
		case userinteraction.FieldInteractionType:
			values[i] = new(sql.NullString)
		case userinteraction.FieldCreatedAt, userinteraction.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case userinteraction.FieldID, userinteraction.FieldUserID, userinteraction.FieldTargetUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserInteraction fields.
func (_m *UserInteraction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userinteraction.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case userinteraction.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				_m.UserID = *value
			}
		case userinteraction.FieldTargetUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field target_user_id", values[i])
			} else if value != nil {
				_m.TargetUserID = *value
			}
		case userinteraction.FieldInteractionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field interaction_type", values[i])
			} else if value.Valid {
				_m.InteractionType = userinteraction.InteractionType(value.String)
			}
		case userinteraction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case userinteraction.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				_m.ExpiresAt = value.Time
			}
		case userinteraction.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserInteraction.
// This includes values selected through modifiers, order, etc.
func (_m *UserInteraction) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserInteraction entity.
func (_m *UserInteraction) QueryUser() *UserQuery {
	return NewUserInteractionClient(_m.config).QueryUser(_m)
}

// QueryTargetUser queries the "target_user" edge of the UserInteraction entity.
func (_m *UserInteraction) QueryTargetUser() *UserQuery {
	return NewUserInteractionClient(_m.config).QueryTargetUser(_m)
}

// Update returns a builder for updating this UserInteraction.
// Note that you need to call UserInteraction.Unwrap() before calling this method if this UserInteraction
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *UserInteraction) Update() *UserInteractionUpdateOne {
	return NewUserInteractionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the UserInteraction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *UserInteraction) Unwrap() *UserInteraction {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserInteraction is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *UserInteraction) String() string {
	var builder strings.Builder
	builder.WriteString("UserInteraction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("target_user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.TargetUserID))
	builder.WriteString(", ")
	builder.WriteString("interaction_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.InteractionType))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(_m.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// UserInteractions is a parsable slice of UserInteraction.
type UserInteractions []*UserInteraction
