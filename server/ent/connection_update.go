// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"match-me/ent/connection"
	"match-me/ent/predicate"
	"match-me/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ConnectionUpdate is the builder for updating Connection entities.
type ConnectionUpdate struct {
	config
	hooks    []Hook
	mutation *ConnectionMutation
}

// Where appends a list predicates to the ConnectionUpdate builder.
func (_u *ConnectionUpdate) Where(ps ...predicate.Connection) *ConnectionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStatus sets the "status" field.
func (_u *ConnectionUpdate) SetStatus(v connection.Status) *ConnectionUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ConnectionUpdate) SetNillableStatus(v *connection.Status) *ConnectionUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetUserAID sets the "user_a_id" field.
func (_u *ConnectionUpdate) SetUserAID(v uuid.UUID) *ConnectionUpdate {
	_u.mutation.SetUserAID(v)
	return _u
}

// SetNillableUserAID sets the "user_a_id" field if the given value is not nil.
func (_u *ConnectionUpdate) SetNillableUserAID(v *uuid.UUID) *ConnectionUpdate {
	if v != nil {
		_u.SetUserAID(*v)
	}
	return _u
}

// SetUserBID sets the "user_b_id" field.
func (_u *ConnectionUpdate) SetUserBID(v uuid.UUID) *ConnectionUpdate {
	_u.mutation.SetUserBID(v)
	return _u
}

// SetNillableUserBID sets the "user_b_id" field if the given value is not nil.
func (_u *ConnectionUpdate) SetNillableUserBID(v *uuid.UUID) *ConnectionUpdate {
	if v != nil {
		_u.SetUserBID(*v)
	}
	return _u
}

// SetConnectedAt sets the "connected_at" field.
func (_u *ConnectionUpdate) SetConnectedAt(v time.Time) *ConnectionUpdate {
	_u.mutation.SetConnectedAt(v)
	return _u
}

// SetNillableConnectedAt sets the "connected_at" field if the given value is not nil.
func (_u *ConnectionUpdate) SetNillableConnectedAt(v *time.Time) *ConnectionUpdate {
	if v != nil {
		_u.SetConnectedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ConnectionUpdate) SetUpdatedAt(v time.Time) *ConnectionUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDroppedAt sets the "dropped_at" field.
func (_u *ConnectionUpdate) SetDroppedAt(v time.Time) *ConnectionUpdate {
	_u.mutation.SetDroppedAt(v)
	return _u
}

// SetNillableDroppedAt sets the "dropped_at" field if the given value is not nil.
func (_u *ConnectionUpdate) SetNillableDroppedAt(v *time.Time) *ConnectionUpdate {
	if v != nil {
		_u.SetDroppedAt(*v)
	}
	return _u
}

// ClearDroppedAt clears the value of the "dropped_at" field.
func (_u *ConnectionUpdate) ClearDroppedAt() *ConnectionUpdate {
	_u.mutation.ClearDroppedAt()
	return _u
}

// SetUserA sets the "user_a" edge to the User entity.
func (_u *ConnectionUpdate) SetUserA(v *User) *ConnectionUpdate {
	return _u.SetUserAID(v.ID)
}

// SetUserB sets the "user_b" edge to the User entity.
func (_u *ConnectionUpdate) SetUserB(v *User) *ConnectionUpdate {
	return _u.SetUserBID(v.ID)
}

// Mutation returns the ConnectionMutation object of the builder.
func (_u *ConnectionUpdate) Mutation() *ConnectionMutation {
	return _u.mutation
}

// ClearUserA clears the "user_a" edge to the User entity.
func (_u *ConnectionUpdate) ClearUserA() *ConnectionUpdate {
	_u.mutation.ClearUserA()
	return _u
}

// ClearUserB clears the "user_b" edge to the User entity.
func (_u *ConnectionUpdate) ClearUserB() *ConnectionUpdate {
	_u.mutation.ClearUserB()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ConnectionUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ConnectionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ConnectionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ConnectionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ConnectionUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := connection.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ConnectionUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := connection.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Connection.status": %w`, err)}
		}
	}
	if _u.mutation.UserACleared() && len(_u.mutation.UserAIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.user_a"`)
	}
	if _u.mutation.UserBCleared() && len(_u.mutation.UserBIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.user_b"`)
	}
	return nil
}

func (_u *ConnectionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(connection.Table, connection.Columns, sqlgraph.NewFieldSpec(connection.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(connection.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ConnectedAt(); ok {
		_spec.SetField(connection.FieldConnectedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(connection.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DroppedAt(); ok {
		_spec.SetField(connection.FieldDroppedAt, field.TypeTime, value)
	}
	if _u.mutation.DroppedAtCleared() {
		_spec.ClearField(connection.FieldDroppedAt, field.TypeTime)
	}
	if _u.mutation.UserACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.UserATable,
			Columns: []string{connection.UserAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.UserATable,
			Columns: []string{connection.UserAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.UserBTable,
			Columns: []string{connection.UserBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserBIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.UserBTable,
			Columns: []string{connection.UserBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ConnectionUpdateOne is the builder for updating a single Connection entity.
type ConnectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConnectionMutation
}

// SetStatus sets the "status" field.
func (_u *ConnectionUpdateOne) SetStatus(v connection.Status) *ConnectionUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ConnectionUpdateOne) SetNillableStatus(v *connection.Status) *ConnectionUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetUserAID sets the "user_a_id" field.
func (_u *ConnectionUpdateOne) SetUserAID(v uuid.UUID) *ConnectionUpdateOne {
	_u.mutation.SetUserAID(v)
	return _u
}

// SetNillableUserAID sets the "user_a_id" field if the given value is not nil.
func (_u *ConnectionUpdateOne) SetNillableUserAID(v *uuid.UUID) *ConnectionUpdateOne {
	if v != nil {
		_u.SetUserAID(*v)
	}
	return _u
}

// SetUserBID sets the "user_b_id" field.
func (_u *ConnectionUpdateOne) SetUserBID(v uuid.UUID) *ConnectionUpdateOne {
	_u.mutation.SetUserBID(v)
	return _u
}

// SetNillableUserBID sets the "user_b_id" field if the given value is not nil.
func (_u *ConnectionUpdateOne) SetNillableUserBID(v *uuid.UUID) *ConnectionUpdateOne {
	if v != nil {
		_u.SetUserBID(*v)
	}
	return _u
}

// SetConnectedAt sets the "connected_at" field.
func (_u *ConnectionUpdateOne) SetConnectedAt(v time.Time) *ConnectionUpdateOne {
	_u.mutation.SetConnectedAt(v)
	return _u
}

// SetNillableConnectedAt sets the "connected_at" field if the given value is not nil.
func (_u *ConnectionUpdateOne) SetNillableConnectedAt(v *time.Time) *ConnectionUpdateOne {
	if v != nil {
		_u.SetConnectedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ConnectionUpdateOne) SetUpdatedAt(v time.Time) *ConnectionUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDroppedAt sets the "dropped_at" field.
func (_u *ConnectionUpdateOne) SetDroppedAt(v time.Time) *ConnectionUpdateOne {
	_u.mutation.SetDroppedAt(v)
	return _u
}

// SetNillableDroppedAt sets the "dropped_at" field if the given value is not nil.
func (_u *ConnectionUpdateOne) SetNillableDroppedAt(v *time.Time) *ConnectionUpdateOne {
	if v != nil {
		_u.SetDroppedAt(*v)
	}
	return _u
}

// ClearDroppedAt clears the value of the "dropped_at" field.
func (_u *ConnectionUpdateOne) ClearDroppedAt() *ConnectionUpdateOne {
	_u.mutation.ClearDroppedAt()
	return _u
}

// SetUserA sets the "user_a" edge to the User entity.
func (_u *ConnectionUpdateOne) SetUserA(v *User) *ConnectionUpdateOne {
	return _u.SetUserAID(v.ID)
}

// SetUserB sets the "user_b" edge to the User entity.
func (_u *ConnectionUpdateOne) SetUserB(v *User) *ConnectionUpdateOne {
	return _u.SetUserBID(v.ID)
}

// Mutation returns the ConnectionMutation object of the builder.
func (_u *ConnectionUpdateOne) Mutation() *ConnectionMutation {
	return _u.mutation
}

// ClearUserA clears the "user_a" edge to the User entity.
func (_u *ConnectionUpdateOne) ClearUserA() *ConnectionUpdateOne {
	_u.mutation.ClearUserA()
	return _u
}

// ClearUserB clears the "user_b" edge to the User entity.
func (_u *ConnectionUpdateOne) ClearUserB() *ConnectionUpdateOne {
	_u.mutation.ClearUserB()
	return _u
}

// Where appends a list predicates to the ConnectionUpdate builder.
func (_u *ConnectionUpdateOne) Where(ps ...predicate.Connection) *ConnectionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ConnectionUpdateOne) Select(field string, fields ...string) *ConnectionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Connection entity.
func (_u *ConnectionUpdateOne) Save(ctx context.Context) (*Connection, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ConnectionUpdateOne) SaveX(ctx context.Context) *Connection {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ConnectionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ConnectionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ConnectionUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := connection.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ConnectionUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := connection.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Connection.status": %w`, err)}
		}
	}
	if _u.mutation.UserACleared() && len(_u.mutation.UserAIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.user_a"`)
	}
	if _u.mutation.UserBCleared() && len(_u.mutation.UserBIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.user_b"`)
	}
	return nil
}

func (_u *ConnectionUpdateOne) sqlSave(ctx context.Context) (_node *Connection, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(connection.Table, connection.Columns, sqlgraph.NewFieldSpec(connection.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Connection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connection.FieldID)
		for _, f := range fields {
			if !connection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != connection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(connection.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ConnectedAt(); ok {
		_spec.SetField(connection.FieldConnectedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(connection.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DroppedAt(); ok {
		_spec.SetField(connection.FieldDroppedAt, field.TypeTime, value)
	}
	if _u.mutation.DroppedAtCleared() {
		_spec.ClearField(connection.FieldDroppedAt, field.TypeTime)
	}
	if _u.mutation.UserACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.UserATable,
			Columns: []string{connection.UserAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.UserATable,
			Columns: []string{connection.UserAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.UserBTable,
			Columns: []string{connection.UserBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserBIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.UserBTable,
			Columns: []string{connection.UserBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Connection{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
