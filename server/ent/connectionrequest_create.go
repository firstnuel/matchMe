// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"match-me/ent/connectionrequest"
	"match-me/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ConnectionRequestCreate is the builder for creating a ConnectionRequest entity.
type ConnectionRequestCreate struct {
	config
	mutation *ConnectionRequestMutation
	hooks    []Hook
}

// SetSenderID sets the "sender_id" field.
func (_c *ConnectionRequestCreate) SetSenderID(v uuid.UUID) *ConnectionRequestCreate {
	_c.mutation.SetSenderID(v)
	return _c
}

// SetReceiverID sets the "receiver_id" field.
func (_c *ConnectionRequestCreate) SetReceiverID(v uuid.UUID) *ConnectionRequestCreate {
	_c.mutation.SetReceiverID(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *ConnectionRequestCreate) SetStatus(v connectionrequest.Status) *ConnectionRequestCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *ConnectionRequestCreate) SetNillableStatus(v *connectionrequest.Status) *ConnectionRequestCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetMessage sets the "message" field.
func (_c *ConnectionRequestCreate) SetMessage(v string) *ConnectionRequestCreate {
	_c.mutation.SetMessage(v)
	return _c
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_c *ConnectionRequestCreate) SetNillableMessage(v *string) *ConnectionRequestCreate {
	if v != nil {
		_c.SetMessage(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ConnectionRequestCreate) SetCreatedAt(v time.Time) *ConnectionRequestCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ConnectionRequestCreate) SetNillableCreatedAt(v *time.Time) *ConnectionRequestCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ConnectionRequestCreate) SetUpdatedAt(v time.Time) *ConnectionRequestCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ConnectionRequestCreate) SetNillableUpdatedAt(v *time.Time) *ConnectionRequestCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetRespondedAt sets the "responded_at" field.
func (_c *ConnectionRequestCreate) SetRespondedAt(v time.Time) *ConnectionRequestCreate {
	_c.mutation.SetRespondedAt(v)
	return _c
}

// SetNillableRespondedAt sets the "responded_at" field if the given value is not nil.
func (_c *ConnectionRequestCreate) SetNillableRespondedAt(v *time.Time) *ConnectionRequestCreate {
	if v != nil {
		_c.SetRespondedAt(*v)
	}
	return _c
}

// SetExpiresAt sets the "expires_at" field.
func (_c *ConnectionRequestCreate) SetExpiresAt(v time.Time) *ConnectionRequestCreate {
	_c.mutation.SetExpiresAt(v)
	return _c
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_c *ConnectionRequestCreate) SetNillableExpiresAt(v *time.Time) *ConnectionRequestCreate {
	if v != nil {
		_c.SetExpiresAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ConnectionRequestCreate) SetID(v uuid.UUID) *ConnectionRequestCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ConnectionRequestCreate) SetNillableID(v *uuid.UUID) *ConnectionRequestCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetSender sets the "sender" edge to the User entity.
func (_c *ConnectionRequestCreate) SetSender(v *User) *ConnectionRequestCreate {
	return _c.SetSenderID(v.ID)
}

// SetReceiver sets the "receiver" edge to the User entity.
func (_c *ConnectionRequestCreate) SetReceiver(v *User) *ConnectionRequestCreate {
	return _c.SetReceiverID(v.ID)
}

// Mutation returns the ConnectionRequestMutation object of the builder.
func (_c *ConnectionRequestCreate) Mutation() *ConnectionRequestMutation {
	return _c.mutation
}

// Save creates the ConnectionRequest in the database.
func (_c *ConnectionRequestCreate) Save(ctx context.Context) (*ConnectionRequest, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ConnectionRequestCreate) SaveX(ctx context.Context) *ConnectionRequest {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ConnectionRequestCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ConnectionRequestCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ConnectionRequestCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := connectionrequest.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := connectionrequest.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := connectionrequest.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := connectionrequest.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ConnectionRequestCreate) check() error {
	if _, ok := _c.mutation.SenderID(); !ok {
		return &ValidationError{Name: "sender_id", err: errors.New(`ent: missing required field "ConnectionRequest.sender_id"`)}
	}
	if _, ok := _c.mutation.ReceiverID(); !ok {
		return &ValidationError{Name: "receiver_id", err: errors.New(`ent: missing required field "ConnectionRequest.receiver_id"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ConnectionRequest.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := connectionrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ConnectionRequest.status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Message(); ok {
		if err := connectionrequest.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "ConnectionRequest.message": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ConnectionRequest.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ConnectionRequest.updated_at"`)}
	}
	if len(_c.mutation.SenderIDs()) == 0 {
		return &ValidationError{Name: "sender", err: errors.New(`ent: missing required edge "ConnectionRequest.sender"`)}
	}
	if len(_c.mutation.ReceiverIDs()) == 0 {
		return &ValidationError{Name: "receiver", err: errors.New(`ent: missing required edge "ConnectionRequest.receiver"`)}
	}
	return nil
}

func (_c *ConnectionRequestCreate) sqlSave(ctx context.Context) (*ConnectionRequest, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ConnectionRequestCreate) createSpec() (*ConnectionRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &ConnectionRequest{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(connectionrequest.Table, sqlgraph.NewFieldSpec(connectionrequest.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(connectionrequest.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Message(); ok {
		_spec.SetField(connectionrequest.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(connectionrequest.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(connectionrequest.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.RespondedAt(); ok {
		_spec.SetField(connectionrequest.FieldRespondedAt, field.TypeTime, value)
		_node.RespondedAt = value
	}
	if value, ok := _c.mutation.ExpiresAt(); ok {
		_spec.SetField(connectionrequest.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if nodes := _c.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionrequest.SenderTable,
			Columns: []string{connectionrequest.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SenderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionrequest.ReceiverTable,
			Columns: []string{connectionrequest.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReceiverID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ConnectionRequestCreateBulk is the builder for creating many ConnectionRequest entities in bulk.
type ConnectionRequestCreateBulk struct {
	config
	err      error
	builders []*ConnectionRequestCreate
}

// Save creates the ConnectionRequest entities in the database.
func (_c *ConnectionRequestCreateBulk) Save(ctx context.Context) ([]*ConnectionRequest, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ConnectionRequest, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConnectionRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ConnectionRequestCreateBulk) SaveX(ctx context.Context) []*ConnectionRequest {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ConnectionRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ConnectionRequestCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
