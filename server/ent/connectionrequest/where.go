// Code generated by ent, DO NOT EDIT.

package connectionrequest

import (
	"match-me/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldLTE(FieldID, id))
}

// SenderID applies equality check predicate on the "sender_id" field. It's identical to SenderIDEQ.
func SenderID(v uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEQ(FieldSenderID, v))
}

// ReceiverID applies equality check predicate on the "receiver_id" field. It's identical to ReceiverIDEQ.
func ReceiverID(v uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEQ(FieldReceiverID, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEQ(FieldMessage, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEQ(FieldUpdatedAt, v))
}

// RespondedAt applies equality check predicate on the "responded_at" field. It's identical to RespondedAtEQ.
func RespondedAt(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEQ(FieldRespondedAt, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEQ(FieldExpiresAt, v))
}

// SenderIDEQ applies the EQ predicate on the "sender_id" field.
func SenderIDEQ(v uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEQ(FieldSenderID, v))
}

// SenderIDNEQ applies the NEQ predicate on the "sender_id" field.
func SenderIDNEQ(v uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNEQ(FieldSenderID, v))
}

// SenderIDIn applies the In predicate on the "sender_id" field.
func SenderIDIn(vs ...uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldIn(FieldSenderID, vs...))
}

// SenderIDNotIn applies the NotIn predicate on the "sender_id" field.
func SenderIDNotIn(vs ...uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNotIn(FieldSenderID, vs...))
}

// ReceiverIDEQ applies the EQ predicate on the "receiver_id" field.
func ReceiverIDEQ(v uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEQ(FieldReceiverID, v))
}

// ReceiverIDNEQ applies the NEQ predicate on the "receiver_id" field.
func ReceiverIDNEQ(v uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNEQ(FieldReceiverID, v))
}

// ReceiverIDIn applies the In predicate on the "receiver_id" field.
func ReceiverIDIn(vs ...uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldIn(FieldReceiverID, vs...))
}

// ReceiverIDNotIn applies the NotIn predicate on the "receiver_id" field.
func ReceiverIDNotIn(vs ...uuid.UUID) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNotIn(FieldReceiverID, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNotIn(FieldStatus, vs...))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldIsNull(FieldMessage))
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNotNull(FieldMessage))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldContainsFold(FieldMessage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldLTE(FieldUpdatedAt, v))
}

// RespondedAtEQ applies the EQ predicate on the "responded_at" field.
func RespondedAtEQ(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEQ(FieldRespondedAt, v))
}

// RespondedAtNEQ applies the NEQ predicate on the "responded_at" field.
func RespondedAtNEQ(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNEQ(FieldRespondedAt, v))
}

// RespondedAtIn applies the In predicate on the "responded_at" field.
func RespondedAtIn(vs ...time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldIn(FieldRespondedAt, vs...))
}

// RespondedAtNotIn applies the NotIn predicate on the "responded_at" field.
func RespondedAtNotIn(vs ...time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNotIn(FieldRespondedAt, vs...))
}

// RespondedAtGT applies the GT predicate on the "responded_at" field.
func RespondedAtGT(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldGT(FieldRespondedAt, v))
}

// RespondedAtGTE applies the GTE predicate on the "responded_at" field.
func RespondedAtGTE(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldGTE(FieldRespondedAt, v))
}

// RespondedAtLT applies the LT predicate on the "responded_at" field.
func RespondedAtLT(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldLT(FieldRespondedAt, v))
}

// RespondedAtLTE applies the LTE predicate on the "responded_at" field.
func RespondedAtLTE(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldLTE(FieldRespondedAt, v))
}

// RespondedAtIsNil applies the IsNil predicate on the "responded_at" field.
func RespondedAtIsNil() predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldIsNull(FieldRespondedAt))
}

// RespondedAtNotNil applies the NotNil predicate on the "responded_at" field.
func RespondedAtNotNil() predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNotNull(FieldRespondedAt))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtIsNil applies the IsNil predicate on the "expires_at" field.
func ExpiresAtIsNil() predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldIsNull(FieldExpiresAt))
}

// ExpiresAtNotNil applies the NotNil predicate on the "expires_at" field.
func ExpiresAtNotNil() predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.FieldNotNull(FieldExpiresAt))
}

// HasSender applies the HasEdge predicate on the "sender" edge.
func HasSender() predicate.ConnectionRequest {
	return predicate.ConnectionRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SenderTable, SenderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSenderWith applies the HasEdge predicate on the "sender" edge with a given conditions (other predicates).
func HasSenderWith(preds ...predicate.User) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(func(s *sql.Selector) {
		step := newSenderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReceiver applies the HasEdge predicate on the "receiver" edge.
func HasReceiver() predicate.ConnectionRequest {
	return predicate.ConnectionRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ReceiverTable, ReceiverColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceiverWith applies the HasEdge predicate on the "receiver" edge with a given conditions (other predicates).
func HasReceiverWith(preds ...predicate.User) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(func(s *sql.Selector) {
		step := newReceiverStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ConnectionRequest) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ConnectionRequest) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ConnectionRequest) predicate.ConnectionRequest {
	return predicate.ConnectionRequest(sql.NotPredicates(p))
}
