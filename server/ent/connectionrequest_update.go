// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"match-me/ent/connectionrequest"
	"match-me/ent/predicate"
	"match-me/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ConnectionRequestUpdate is the builder for updating ConnectionRequest entities.
type ConnectionRequestUpdate struct {
	config
	hooks    []Hook
	mutation *ConnectionRequestMutation
}

// Where appends a list predicates to the ConnectionRequestUpdate builder.
func (_u *ConnectionRequestUpdate) Where(ps ...predicate.ConnectionRequest) *ConnectionRequestUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSenderID sets the "sender_id" field.
func (_u *ConnectionRequestUpdate) SetSenderID(v uuid.UUID) *ConnectionRequestUpdate {
	_u.mutation.SetSenderID(v)
	return _u
}

// SetNillableSenderID sets the "sender_id" field if the given value is not nil.
func (_u *ConnectionRequestUpdate) SetNillableSenderID(v *uuid.UUID) *ConnectionRequestUpdate {
	if v != nil {
		_u.SetSenderID(*v)
	}
	return _u
}

// SetReceiverID sets the "receiver_id" field.
func (_u *ConnectionRequestUpdate) SetReceiverID(v uuid.UUID) *ConnectionRequestUpdate {
	_u.mutation.SetReceiverID(v)
	return _u
}

// SetNillableReceiverID sets the "receiver_id" field if the given value is not nil.
func (_u *ConnectionRequestUpdate) SetNillableReceiverID(v *uuid.UUID) *ConnectionRequestUpdate {
	if v != nil {
		_u.SetReceiverID(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *ConnectionRequestUpdate) SetStatus(v connectionrequest.Status) *ConnectionRequestUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ConnectionRequestUpdate) SetNillableStatus(v *connectionrequest.Status) *ConnectionRequestUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetMessage sets the "message" field.
func (_u *ConnectionRequestUpdate) SetMessage(v string) *ConnectionRequestUpdate {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *ConnectionRequestUpdate) SetNillableMessage(v *string) *ConnectionRequestUpdate {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// ClearMessage clears the value of the "message" field.
func (_u *ConnectionRequestUpdate) ClearMessage() *ConnectionRequestUpdate {
	_u.mutation.ClearMessage()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ConnectionRequestUpdate) SetUpdatedAt(v time.Time) *ConnectionRequestUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetRespondedAt sets the "responded_at" field.
func (_u *ConnectionRequestUpdate) SetRespondedAt(v time.Time) *ConnectionRequestUpdate {
	_u.mutation.SetRespondedAt(v)
	return _u
}

// SetNillableRespondedAt sets the "responded_at" field if the given value is not nil.
func (_u *ConnectionRequestUpdate) SetNillableRespondedAt(v *time.Time) *ConnectionRequestUpdate {
	if v != nil {
		_u.SetRespondedAt(*v)
	}
	return _u
}

// ClearRespondedAt clears the value of the "responded_at" field.
func (_u *ConnectionRequestUpdate) ClearRespondedAt() *ConnectionRequestUpdate {
	_u.mutation.ClearRespondedAt()
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *ConnectionRequestUpdate) SetExpiresAt(v time.Time) *ConnectionRequestUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *ConnectionRequestUpdate) SetNillableExpiresAt(v *time.Time) *ConnectionRequestUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *ConnectionRequestUpdate) ClearExpiresAt() *ConnectionRequestUpdate {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetSender sets the "sender" edge to the User entity.
func (_u *ConnectionRequestUpdate) SetSender(v *User) *ConnectionRequestUpdate {
	return _u.SetSenderID(v.ID)
}

// SetReceiver sets the "receiver" edge to the User entity.
func (_u *ConnectionRequestUpdate) SetReceiver(v *User) *ConnectionRequestUpdate {
	return _u.SetReceiverID(v.ID)
}

// Mutation returns the ConnectionRequestMutation object of the builder.
func (_u *ConnectionRequestUpdate) Mutation() *ConnectionRequestMutation {
	return _u.mutation
}

// ClearSender clears the "sender" edge to the User entity.
func (_u *ConnectionRequestUpdate) ClearSender() *ConnectionRequestUpdate {
	_u.mutation.ClearSender()
	return _u
}

// ClearReceiver clears the "receiver" edge to the User entity.
func (_u *ConnectionRequestUpdate) ClearReceiver() *ConnectionRequestUpdate {
	_u.mutation.ClearReceiver()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ConnectionRequestUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ConnectionRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ConnectionRequestUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ConnectionRequestUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ConnectionRequestUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := connectionrequest.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ConnectionRequestUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := connectionrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ConnectionRequest.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Message(); ok {
		if err := connectionrequest.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "ConnectionRequest.message": %w`, err)}
		}
	}
	if _u.mutation.SenderCleared() && len(_u.mutation.SenderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConnectionRequest.sender"`)
	}
	if _u.mutation.ReceiverCleared() && len(_u.mutation.ReceiverIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConnectionRequest.receiver"`)
	}
	return nil
}

func (_u *ConnectionRequestUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(connectionrequest.Table, connectionrequest.Columns, sqlgraph.NewFieldSpec(connectionrequest.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(connectionrequest.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(connectionrequest.FieldMessage, field.TypeString, value)
	}
	if _u.mutation.MessageCleared() {
		_spec.ClearField(connectionrequest.FieldMessage, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(connectionrequest.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RespondedAt(); ok {
		_spec.SetField(connectionrequest.FieldRespondedAt, field.TypeTime, value)
	}
	if _u.mutation.RespondedAtCleared() {
		_spec.ClearField(connectionrequest.FieldRespondedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(connectionrequest.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(connectionrequest.FieldExpiresAt, field.TypeTime)
	}
	if _u.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionrequest.SenderTable,
			Columns: []string{connectionrequest.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionrequest.SenderTable,
			Columns: []string{connectionrequest.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionrequest.ReceiverTable,
			Columns: []string{connectionrequest.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionrequest.ReceiverTable,
			Columns: []string{connectionrequest.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectionrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ConnectionRequestUpdateOne is the builder for updating a single ConnectionRequest entity.
type ConnectionRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConnectionRequestMutation
}

// SetSenderID sets the "sender_id" field.
func (_u *ConnectionRequestUpdateOne) SetSenderID(v uuid.UUID) *ConnectionRequestUpdateOne {
	_u.mutation.SetSenderID(v)
	return _u
}

// SetNillableSenderID sets the "sender_id" field if the given value is not nil.
func (_u *ConnectionRequestUpdateOne) SetNillableSenderID(v *uuid.UUID) *ConnectionRequestUpdateOne {
	if v != nil {
		_u.SetSenderID(*v)
	}
	return _u
}

// SetReceiverID sets the "receiver_id" field.
func (_u *ConnectionRequestUpdateOne) SetReceiverID(v uuid.UUID) *ConnectionRequestUpdateOne {
	_u.mutation.SetReceiverID(v)
	return _u
}

// SetNillableReceiverID sets the "receiver_id" field if the given value is not nil.
func (_u *ConnectionRequestUpdateOne) SetNillableReceiverID(v *uuid.UUID) *ConnectionRequestUpdateOne {
	if v != nil {
		_u.SetReceiverID(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *ConnectionRequestUpdateOne) SetStatus(v connectionrequest.Status) *ConnectionRequestUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ConnectionRequestUpdateOne) SetNillableStatus(v *connectionrequest.Status) *ConnectionRequestUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetMessage sets the "message" field.
func (_u *ConnectionRequestUpdateOne) SetMessage(v string) *ConnectionRequestUpdateOne {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *ConnectionRequestUpdateOne) SetNillableMessage(v *string) *ConnectionRequestUpdateOne {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// ClearMessage clears the value of the "message" field.
func (_u *ConnectionRequestUpdateOne) ClearMessage() *ConnectionRequestUpdateOne {
	_u.mutation.ClearMessage()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ConnectionRequestUpdateOne) SetUpdatedAt(v time.Time) *ConnectionRequestUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetRespondedAt sets the "responded_at" field.
func (_u *ConnectionRequestUpdateOne) SetRespondedAt(v time.Time) *ConnectionRequestUpdateOne {
	_u.mutation.SetRespondedAt(v)
	return _u
}

// SetNillableRespondedAt sets the "responded_at" field if the given value is not nil.
func (_u *ConnectionRequestUpdateOne) SetNillableRespondedAt(v *time.Time) *ConnectionRequestUpdateOne {
	if v != nil {
		_u.SetRespondedAt(*v)
	}
	return _u
}

// ClearRespondedAt clears the value of the "responded_at" field.
func (_u *ConnectionRequestUpdateOne) ClearRespondedAt() *ConnectionRequestUpdateOne {
	_u.mutation.ClearRespondedAt()
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *ConnectionRequestUpdateOne) SetExpiresAt(v time.Time) *ConnectionRequestUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *ConnectionRequestUpdateOne) SetNillableExpiresAt(v *time.Time) *ConnectionRequestUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *ConnectionRequestUpdateOne) ClearExpiresAt() *ConnectionRequestUpdateOne {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetSender sets the "sender" edge to the User entity.
func (_u *ConnectionRequestUpdateOne) SetSender(v *User) *ConnectionRequestUpdateOne {
	return _u.SetSenderID(v.ID)
}

// SetReceiver sets the "receiver" edge to the User entity.
func (_u *ConnectionRequestUpdateOne) SetReceiver(v *User) *ConnectionRequestUpdateOne {
	return _u.SetReceiverID(v.ID)
}

// Mutation returns the ConnectionRequestMutation object of the builder.
func (_u *ConnectionRequestUpdateOne) Mutation() *ConnectionRequestMutation {
	return _u.mutation
}

// ClearSender clears the "sender" edge to the User entity.
func (_u *ConnectionRequestUpdateOne) ClearSender() *ConnectionRequestUpdateOne {
	_u.mutation.ClearSender()
	return _u
}

// ClearReceiver clears the "receiver" edge to the User entity.
func (_u *ConnectionRequestUpdateOne) ClearReceiver() *ConnectionRequestUpdateOne {
	_u.mutation.ClearReceiver()
	return _u
}

// Where appends a list predicates to the ConnectionRequestUpdate builder.
func (_u *ConnectionRequestUpdateOne) Where(ps ...predicate.ConnectionRequest) *ConnectionRequestUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ConnectionRequestUpdateOne) Select(field string, fields ...string) *ConnectionRequestUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ConnectionRequest entity.
func (_u *ConnectionRequestUpdateOne) Save(ctx context.Context) (*ConnectionRequest, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ConnectionRequestUpdateOne) SaveX(ctx context.Context) *ConnectionRequest {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ConnectionRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ConnectionRequestUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ConnectionRequestUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := connectionrequest.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ConnectionRequestUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := connectionrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ConnectionRequest.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Message(); ok {
		if err := connectionrequest.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "ConnectionRequest.message": %w`, err)}
		}
	}
	if _u.mutation.SenderCleared() && len(_u.mutation.SenderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConnectionRequest.sender"`)
	}
	if _u.mutation.ReceiverCleared() && len(_u.mutation.ReceiverIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConnectionRequest.receiver"`)
	}
	return nil
}

func (_u *ConnectionRequestUpdateOne) sqlSave(ctx context.Context) (_node *ConnectionRequest, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(connectionrequest.Table, connectionrequest.Columns, sqlgraph.NewFieldSpec(connectionrequest.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConnectionRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connectionrequest.FieldID)
		for _, f := range fields {
			if !connectionrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != connectionrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(connectionrequest.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(connectionrequest.FieldMessage, field.TypeString, value)
	}
	if _u.mutation.MessageCleared() {
		_spec.ClearField(connectionrequest.FieldMessage, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(connectionrequest.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RespondedAt(); ok {
		_spec.SetField(connectionrequest.FieldRespondedAt, field.TypeTime, value)
	}
	if _u.mutation.RespondedAtCleared() {
		_spec.ClearField(connectionrequest.FieldRespondedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(connectionrequest.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(connectionrequest.FieldExpiresAt, field.TypeTime)
	}
	if _u.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionrequest.SenderTable,
			Columns: []string{connectionrequest.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionrequest.SenderTable,
			Columns: []string{connectionrequest.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionrequest.ReceiverTable,
			Columns: []string{connectionrequest.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionrequest.ReceiverTable,
			Columns: []string{connectionrequest.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ConnectionRequest{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectionrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
