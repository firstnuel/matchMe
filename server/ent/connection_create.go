// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"match-me/ent/connection"
	"match-me/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ConnectionCreate is the builder for creating a Connection entity.
type ConnectionCreate struct {
	config
	mutation *ConnectionMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (_c *ConnectionCreate) SetStatus(v connection.Status) *ConnectionCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetUserAID sets the "user_a_id" field.
func (_c *ConnectionCreate) SetUserAID(v uuid.UUID) *ConnectionCreate {
	_c.mutation.SetUserAID(v)
	return _c
}

// SetUserBID sets the "user_b_id" field.
func (_c *ConnectionCreate) SetUserBID(v uuid.UUID) *ConnectionCreate {
	_c.mutation.SetUserBID(v)
	return _c
}

// SetConnectedAt sets the "connected_at" field.
func (_c *ConnectionCreate) SetConnectedAt(v time.Time) *ConnectionCreate {
	_c.mutation.SetConnectedAt(v)
	return _c
}

// SetNillableConnectedAt sets the "connected_at" field if the given value is not nil.
func (_c *ConnectionCreate) SetNillableConnectedAt(v *time.Time) *ConnectionCreate {
	if v != nil {
		_c.SetConnectedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ConnectionCreate) SetUpdatedAt(v time.Time) *ConnectionCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ConnectionCreate) SetNillableUpdatedAt(v *time.Time) *ConnectionCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDroppedAt sets the "dropped_at" field.
func (_c *ConnectionCreate) SetDroppedAt(v time.Time) *ConnectionCreate {
	_c.mutation.SetDroppedAt(v)
	return _c
}

// SetNillableDroppedAt sets the "dropped_at" field if the given value is not nil.
func (_c *ConnectionCreate) SetNillableDroppedAt(v *time.Time) *ConnectionCreate {
	if v != nil {
		_c.SetDroppedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ConnectionCreate) SetID(v uuid.UUID) *ConnectionCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ConnectionCreate) SetNillableID(v *uuid.UUID) *ConnectionCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetUserA sets the "user_a" edge to the User entity.
func (_c *ConnectionCreate) SetUserA(v *User) *ConnectionCreate {
	return _c.SetUserAID(v.ID)
}

// SetUserB sets the "user_b" edge to the User entity.
func (_c *ConnectionCreate) SetUserB(v *User) *ConnectionCreate {
	return _c.SetUserBID(v.ID)
}

// Mutation returns the ConnectionMutation object of the builder.
func (_c *ConnectionCreate) Mutation() *ConnectionMutation {
	return _c.mutation
}

// Save creates the Connection in the database.
func (_c *ConnectionCreate) Save(ctx context.Context) (*Connection, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ConnectionCreate) SaveX(ctx context.Context) *Connection {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ConnectionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ConnectionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ConnectionCreate) defaults() {
	if _, ok := _c.mutation.ConnectedAt(); !ok {
		v := connection.DefaultConnectedAt()
		_c.mutation.SetConnectedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := connection.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := connection.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ConnectionCreate) check() error {
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Connection.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := connection.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Connection.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.UserAID(); !ok {
		return &ValidationError{Name: "user_a_id", err: errors.New(`ent: missing required field "Connection.user_a_id"`)}
	}
	if _, ok := _c.mutation.UserBID(); !ok {
		return &ValidationError{Name: "user_b_id", err: errors.New(`ent: missing required field "Connection.user_b_id"`)}
	}
	if _, ok := _c.mutation.ConnectedAt(); !ok {
		return &ValidationError{Name: "connected_at", err: errors.New(`ent: missing required field "Connection.connected_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Connection.updated_at"`)}
	}
	if len(_c.mutation.UserAIDs()) == 0 {
		return &ValidationError{Name: "user_a", err: errors.New(`ent: missing required edge "Connection.user_a"`)}
	}
	if len(_c.mutation.UserBIDs()) == 0 {
		return &ValidationError{Name: "user_b", err: errors.New(`ent: missing required edge "Connection.user_b"`)}
	}
	return nil
}

func (_c *ConnectionCreate) sqlSave(ctx context.Context) (*Connection, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ConnectionCreate) createSpec() (*Connection, *sqlgraph.CreateSpec) {
	var (
		_node = &Connection{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(connection.Table, sqlgraph.NewFieldSpec(connection.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(connection.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.ConnectedAt(); ok {
		_spec.SetField(connection.FieldConnectedAt, field.TypeTime, value)
		_node.ConnectedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(connection.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DroppedAt(); ok {
		_spec.SetField(connection.FieldDroppedAt, field.TypeTime, value)
		_node.DroppedAt = value
	}
	if nodes := _c.mutation.UserAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.UserATable,
			Columns: []string{connection.UserAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserAID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UserBIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.UserBTable,
			Columns: []string{connection.UserBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserBID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ConnectionCreateBulk is the builder for creating many Connection entities in bulk.
type ConnectionCreateBulk struct {
	config
	err      error
	builders []*ConnectionCreate
}

// Save creates the Connection entities in the database.
func (_c *ConnectionCreateBulk) Save(ctx context.Context) ([]*Connection, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Connection, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConnectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ConnectionCreateBulk) SaveX(ctx context.Context) []*Connection {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ConnectionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ConnectionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
