// Code generated by ent, DO NOT EDIT.

package userinteraction

import (
	"match-me/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldEQ(FieldUserID, v))
}

// TargetUserID applies equality check predicate on the "target_user_id" field. It's identical to TargetUserIDEQ.
func TargetUserID(v uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldEQ(FieldTargetUserID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldEQ(FieldCreatedAt, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldEQ(FieldExpiresAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldNotIn(FieldUserID, vs...))
}

// TargetUserIDEQ applies the EQ predicate on the "target_user_id" field.
func TargetUserIDEQ(v uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldEQ(FieldTargetUserID, v))
}

// TargetUserIDNEQ applies the NEQ predicate on the "target_user_id" field.
func TargetUserIDNEQ(v uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldNEQ(FieldTargetUserID, v))
}

// TargetUserIDIn applies the In predicate on the "target_user_id" field.
func TargetUserIDIn(vs ...uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldIn(FieldTargetUserID, vs...))
}

// TargetUserIDNotIn applies the NotIn predicate on the "target_user_id" field.
func TargetUserIDNotIn(vs ...uuid.UUID) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldNotIn(FieldTargetUserID, vs...))
}

// InteractionTypeEQ applies the EQ predicate on the "interaction_type" field.
func InteractionTypeEQ(v InteractionType) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldEQ(FieldInteractionType, v))
}

// InteractionTypeNEQ applies the NEQ predicate on the "interaction_type" field.
func InteractionTypeNEQ(v InteractionType) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldNEQ(FieldInteractionType, v))
}

// InteractionTypeIn applies the In predicate on the "interaction_type" field.
func InteractionTypeIn(vs ...InteractionType) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldIn(FieldInteractionType, vs...))
}

// InteractionTypeNotIn applies the NotIn predicate on the "interaction_type" field.
func InteractionTypeNotIn(vs ...InteractionType) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldNotIn(FieldInteractionType, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldLTE(FieldCreatedAt, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtIsNil applies the IsNil predicate on the "expires_at" field.
func ExpiresAtIsNil() predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldIsNull(FieldExpiresAt))
}

// ExpiresAtNotNil applies the NotNil predicate on the "expires_at" field.
func ExpiresAtNotNil() predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldNotNull(FieldExpiresAt))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.UserInteraction {
	return predicate.UserInteraction(sql.FieldNotNull(FieldMetadata))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserInteraction {
	return predicate.UserInteraction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserInteraction {
	return predicate.UserInteraction(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTargetUser applies the HasEdge predicate on the "target_user" edge.
func HasTargetUser() predicate.UserInteraction {
	return predicate.UserInteraction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TargetUserTable, TargetUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetUserWith applies the HasEdge predicate on the "target_user" edge with a given conditions (other predicates).
func HasTargetUserWith(preds ...predicate.User) predicate.UserInteraction {
	return predicate.UserInteraction(func(s *sql.Selector) {
		step := newTargetUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserInteraction) predicate.UserInteraction {
	return predicate.UserInteraction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserInteraction) predicate.UserInteraction {
	return predicate.UserInteraction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserInteraction) predicate.UserInteraction {
	return predicate.UserInteraction(sql.NotPredicates(p))
}
